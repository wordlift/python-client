# coding: utf-8

"""
    Analysis

    Analyse content using Linked Data and Knowledge Graphs.

    The version of the OpenAPI document: 1.0
    Contact: hello@wordlift.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wordlift_client.models.question_and_answer import QuestionAndAnswer

class TestQuestionAndAnswer(unittest.TestCase):
    """QuestionAndAnswer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QuestionAndAnswer:
        """Test QuestionAndAnswer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QuestionAndAnswer`
        """
        model = QuestionAndAnswer()
        if include_optional:
            return QuestionAndAnswer(
                answer = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                entity_gaps = [
                    ''
                    ],
                errors = [
                    wordlift_client.models.validation_result.ValidationResult(
                        level_enum = 'RECOMMENDED', 
                        name = '', 
                        result = 'PASS', )
                    ],
                id = 56,
                iri = '',
                is_deleted = True,
                is_published = True,
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                question = '',
                smart_content_id = 56,
                url = '',
                warnings = [
                    wordlift_client.models.validation_result.ValidationResult(
                        level_enum = 'RECOMMENDED', 
                        name = '', 
                        result = 'PASS', )
                    ]
            )
        else:
            return QuestionAndAnswer(
                iri = '',
                url = '',
        )
        """

    def testQuestionAndAnswer(self):
        """Test QuestionAndAnswer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
