# coding: utf-8

"""
    GraphQL support

    GraphQL endpoint to query Knowledge Graphs

    The version of the OpenAPI document: 1.0
    Contact: hello@wordlift.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from wordlift_client.models.embedding_request import EmbeddingRequest
from typing import Optional, Set
from typing_extensions import Self

class SitemapImportRequest(BaseModel):
    """
    The Sitemap Import request
    """ # noqa: E501
    embedding: Optional[EmbeddingRequest] = None
    id_generator: Optional[StrictStr] = Field(default='default', description="The entity id generator, by default uses the web page path.")
    output_types: Optional[List[StrictStr]] = Field(default=None, description="The type of the generated entities, by default `http://schema.org/WebPage`.")
    overwrite: Optional[StrictBool] = Field(default=False, description="Whether to overwrite existing entities.")
    sitemap_url: Optional[StrictStr] = Field(default=None, description="The sitemap URL")
    sitemap_url_regex: Optional[StrictStr] = Field(default=None, description="A regex filter to apply to discovered URLs, it only applies to URLs in sitemaps.")
    urls: Optional[List[StrictStr]] = Field(default=None, description="The URLs")
    __properties: ClassVar[List[str]] = ["embedding", "id_generator", "output_types", "overwrite", "sitemap_url", "sitemap_url_regex", "urls"]

    @field_validator('id_generator')
    def id_generator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default', 'headline-with-url-hash']):
            raise ValueError("must be one of enum values ('default', 'headline-with-url-hash')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SitemapImportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embedding
        if self.embedding:
            _dict['embedding'] = self.embedding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SitemapImportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "embedding": EmbeddingRequest.from_dict(obj["embedding"]) if obj.get("embedding") is not None else None,
            "id_generator": obj.get("id_generator") if obj.get("id_generator") is not None else 'default',
            "output_types": obj.get("output_types"),
            "overwrite": obj.get("overwrite") if obj.get("overwrite") is not None else False,
            "sitemap_url": obj.get("sitemap_url"),
            "sitemap_url_regex": obj.get("sitemap_url_regex"),
            "urls": obj.get("urls")
        })
        return _obj


