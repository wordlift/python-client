# coding: utf-8

"""
    Embeddings API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AnalyticsSync(BaseModel):
    """
    AnalyticsSync
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, description="The Account identifier")
    created_at: Optional[datetime] = Field(default=None, description="The creation date-time.")
    id: Optional[StrictStr] = Field(default=None, description="The resource identifier")
    queries_retrieved: Optional[StrictInt] = Field(default=None, description="Total number of queries retrieved by the analytics provider.")
    retrievable_urls: Optional[StrictInt] = Field(default=None, description="Number of URLs processable by the analytics provider based on the Account URL.")
    started_at: Optional[datetime] = Field(default=None, description="The started date-time.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the sync process.")
    stopped_at: Optional[datetime] = Field(default=None, description="The stopped date-time.")
    total_entities_updated: Optional[StrictInt] = Field(default=None, description="Number of unique entities updated with analytics by this sync.")
    urls_in_dataset: Optional[StrictInt] = Field(default=None, description="Number of total URLs retrieved from dataset entities")
    __properties: ClassVar[List[str]] = ["account_id", "created_at", "id", "queries_retrieved", "retrievable_urls", "started_at", "status", "stopped_at", "total_entities_updated", "urls_in_dataset"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCHEDULED', 'SYNCING', 'COMPLETED', 'ERROR', 'CANCELLED']):
            raise ValueError("must be one of enum values ('SCHEDULED', 'SYNCING', 'COMPLETED', 'ERROR', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyticsSync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "created_at",
            "id",
            "queries_retrieved",
            "retrievable_urls",
            "started_at",
            "status",
            "stopped_at",
            "total_entities_updated",
            "urls_in_dataset",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyticsSync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "queries_retrieved": obj.get("queries_retrieved"),
            "retrievable_urls": obj.get("retrievable_urls"),
            "started_at": obj.get("started_at"),
            "status": obj.get("status"),
            "stopped_at": obj.get("stopped_at"),
            "total_entities_updated": obj.get("total_entities_updated"),
            "urls_in_dataset": obj.get("urls_in_dataset")
        })
        return _obj


