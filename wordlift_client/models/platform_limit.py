# coding: utf-8

"""
    WordLift Fact-Checking API

    API for semi-automated fact-checking. Returns schema.org/ClaimReview markup. This markup is structured data that contains information about the fact check -- for example, what was the claim being assessed, who made the claim, what was the verdict.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PlatformLimit(BaseModel):
    """
    PlatformLimit
    """ # noqa: E501
    applies_to: StrictStr
    based_on: StrictStr
    based_on_value: StrictStr
    created_at: Optional[datetime] = Field(default=None, description="The create date-time.")
    description: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    limits: Annotated[int, Field(strict=True, ge=1)]
    modified_at: Optional[datetime] = Field(default=None, description="The last modified date-time.")
    scope: StrictStr
    __properties: ClassVar[List[str]] = ["applies_to", "based_on", "based_on_value", "created_at", "description", "id", "limits", "modified_at", "scope"]

    @field_validator('based_on')
    def based_on_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SKU']):
            raise ValueError("must be one of enum values ('SKU')")
        return value

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACCOUNT', 'SUBSCRIPTION']):
            raise ValueError("must be one of enum values ('ACCOUNT', 'SUBSCRIPTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlatformLimit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlatformLimit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applies_to": obj.get("applies_to"),
            "based_on": obj.get("based_on"),
            "based_on_value": obj.get("based_on_value"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "limits": obj.get("limits"),
            "modified_at": obj.get("modified_at"),
            "scope": obj.get("scope")
        })
        return _obj


