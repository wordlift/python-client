# coding: utf-8

"""
    Middleware

    Knowledge Graph data management.

    The version of the OpenAPI document: 1.0
    Contact: hello@wordlift.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AnalysesResponseItem(BaseModel):
    """
    AnalysesResponseItem
    """ # noqa: E501
    text: Optional[StrictStr] = Field(default=None, description="The text matching the entity.")
    confidence: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The confidence score this is the right entity.")
    occurrences: Optional[StrictInt] = Field(default=None, description="The number of occurrences.")
    serp_position: Optional[StrictInt] = Field(default=None, description="The position of the entity in SERP. `null` if not applicable.")
    entity_id: Optional[StrictStr] = Field(default=None, description="The entity id (URI).")
    entity_label: Optional[StrictStr] = Field(default=None, description="The entity label.")
    entity_type: Optional[StrictStr] = Field(default=None, description="The entity type.")
    entity_description: Optional[StrictStr] = Field(default=None, description="The entity description.")
    __properties: ClassVar[List[str]] = ["text", "confidence", "occurrences", "serp_position", "entity_id", "entity_label", "entity_type", "entity_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysesResponseItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysesResponseItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "confidence": obj.get("confidence"),
            "occurrences": obj.get("occurrences"),
            "serp_position": obj.get("serp_position"),
            "entity_id": obj.get("entity_id"),
            "entity_label": obj.get("entity_label"),
            "entity_type": obj.get("entity_type"),
            "entity_description": obj.get("entity_description")
        })
        return _obj


