# coding: utf-8

"""
    Middleware

    Knowledge Graph data management.

    The version of the OpenAPI document: 1.0
    Contact: hello@wordlift.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wordlift_client.models.validation_result import ValidationResult
from typing import Optional, Set
from typing_extensions import Self

class QuestionAndAnswer(BaseModel):
    """
    Generated Q&A content.
    """ # noqa: E501
    answer: Optional[StrictStr] = Field(default=None, description="The generated answer.")
    created_at: Optional[datetime] = Field(default=None, description="The create date-time.")
    entity_gaps: Optional[List[StrictStr]] = None
    errors: Optional[List[ValidationResult]] = Field(default=None, description="The set of errors found for the answer.")
    id: Optional[StrictInt] = Field(default=None, description="The unique id.")
    iri: StrictStr = Field(description="The webpage IRI tied to this Q&A.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="The deleted flag.")
    is_published: Optional[StrictBool] = Field(default=False, description="The published flag.")
    modified_at: Optional[datetime] = Field(default=None, description="The last modified date-time.")
    question: Optional[StrictStr] = Field(default=None, description="The generated question.")
    smart_content_id: Optional[StrictInt] = None
    url: StrictStr = Field(description="The webpage URL tied to this Q&A.")
    warnings: Optional[List[ValidationResult]] = Field(default=None, description="The set of warnings found for the answer.")
    __properties: ClassVar[List[str]] = ["answer", "created_at", "entity_gaps", "errors", "id", "iri", "is_deleted", "is_published", "modified_at", "question", "smart_content_id", "url", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuestionAndAnswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "errors",
            "id",
            "modified_at",
            "warnings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuestionAndAnswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answer": obj.get("answer"),
            "created_at": obj.get("created_at"),
            "entity_gaps": obj.get("entity_gaps"),
            "errors": [ValidationResult.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "id": obj.get("id"),
            "iri": obj.get("iri"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "is_published": obj.get("is_published") if obj.get("is_published") is not None else False,
            "modified_at": obj.get("modified_at"),
            "question": obj.get("question"),
            "smart_content_id": obj.get("smart_content_id"),
            "url": obj.get("url"),
            "warnings": [ValidationResult.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


