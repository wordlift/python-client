openapi: 3.0.3
info:
  title: Middleware
  description: Knowledge Graph data management.
  termsOfService: 'https://wordlift.io/terms-of-service/'
  contact:
    name: WordLift
    url: 'https://wordlift.io'
    email: hello@wordlift.io
  license:
    name: (c) copyright 2022-present WordLift
    url: 'https://wordlift.io'
  version: '1.0'
servers:
  - url: 'https://api.wordlift.io'
security:
  - ApiKeyAuth: []
tags:
  - name: Autocomplete
    description: Find entities in Linked Data or Knowledge Graph by partial match.
  - name: Entities
    description: Manage entities in Knowledge Graphs
  - name: Dataset
    description: Manage Entities (legacy)
  - name: GraphQL
    description: Query Knowledge Graphs using GraphQL
  - description: Get Account Information
    name: Account
  - description: Manage Custom Domains
    name: Custom Domains
  - description: Import Botify Crawl data to KG
    name: Botify Crawl Imports
  - description: Retrieve Add-ons data
    name: AddOns
  - description: Data URI for a Web page URL.
    name: Data URI
  - description: Add embeddings to a Knowledge Graphs.
    name: Embedding
  - description: Import sitemaps to the KG
    name: Sitemap Imports
  - description: Retrieve analytics data from Google Search Console
    name: Google Search Console Searches
  - description: Access Google Search Console data
    name: Google Search Console
  - description: Manage Google Merchants
    name: Google Merchants
  - description: Manage Platform Consumptions
    name: Platform Consumptions
  - description: Get answers to questions.
    name: Vector Search Questions
  - description: Manage OAuth2 Authorized Clients
    name: OAuth2 Authorized Clients
  - description: >-
      Import Analytics data to the KG using different sources, e.g. Google
      Search Console.
    name: Analytics Imports
  - description: Manage vector search nodes embeddings.
    name: Vector Search Nodes
  - description: Manage redeem codes.
    name: Redeem Codes
  - description: Create vector search queries.
    name: Vector Search Queries
  - description: The list of included or excluded URLs from the WordPress configuration
    name: Include Excludes (WordPress plugin)
  - description: Manage Platform Limits
    name: Platform Limits
  - description: Manage Accounts
    name: Accounts
  - description: Manage Merchants
    name: Merchants
  - description: Configure Google Search Console OAuth2 authorized access codes.
    name: Google Search Console OAuth2
  - description: Synchronize Products from the Merchant Feed
    name: Merchant Syncs
  - description: Update Plugin Diagnostics data for WordPress clients.
    name: Plugin Diagnostics
  - name: Plugin Events
    description: >-
      Record and query for events raised by the WordLift Plugin in order to
      analyze KPI data.
  - name: Summarizations
    description: Create a generic text summarization
  - name: Classifications
    description: Unsupervised text classification.
  - name: Web Asyncs responses
    description: Retrieve Web Async data.
  - name: Long Tails
    description: Research long tail opportunities.
  - name: Web Asyncs metadata
    description: Operation on asynchronous calls.
  - name: Embeddings
  - description: List fields from graphql query.
    name: Content Generation Fields
  - description: Render the given prompt template.
    name: Content Generation Renders
  - description: Manage content generation syncs.
    name: Content Generation Syncs
  - description: Operations on Q&A smart content projects.
    name: QuestionsAndAnswers
  - description: Manage content generation records.
    name: Content Generation Records
  - description: Operations on Word biases connected to prompts.
    name: Content Generation Word biases
  - description: Operations on Content Generation projects.
    name: Content Generations
  - description: Manage validation rules for Generative AI projects.
    name: Rules
  - description: Generation completions.
    name: Content Generation Completion
  - description: List the available linguistic models.
    name: Content Generation Models
  - description: Export Content Generation Records in text/csv format.
    name: Content Generation Records Export
  - description: Manage Presets
    name: Content Generation Presets
  - description: Manage content generation stats.
    name: Content Generation Stats
  - name: SEO Scores
    description: Create a SEO Score
  - name: Sitemap Generator
    description: Generate sitemaps using GraphQL queries to WordLift KG.
  - name: Microdata
    description: Converts any microdata found on a web page to JSON-LD.
  - name: Inspector
    description: Inspect a web page URL
  - name: Analysis
    description: >-
      Analyse content and extract entities from Linked Data and Knowledge
      Graphs.
  - name: Entity Gaps
    description: Analyze entity gaps.
  - name: Analyses
    description: Perform content analysis.
  - name: Content Expansions
    description: Expand Content.
paths:
  /entities:
    get:
      tags:
        - Entities
      summary: Get
      description: Get entities with the provided ids.
      operationId: getEntities
      parameters:
        - name: id
          in: query
          description: 'One or more ids, in the form of URLs.'
          required: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              format: uri
        - name: include_children
          in: query
          description: >-
            Whether to return all the entities whose ids start with the provided
            ids, by default false.
          required: false
          schema:
            type: string
            default: 'false'
        - name: include_referenced
          in: query
          description: >-
            Whether to return all the referenced entities (e.g. in
            `schema:mentions`), by default false.
          required: false
          schema:
            type: string
            default: 'false'
        - name: include_private
          in: query
          description: >-
            Whether to return private properties, requires an authenticated
            request, by default false.
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        '200':
          description: Success
          content:
            application/ld+json:
              schema:
                type: array
                description: A model containing the Structured Data.
                items:
                  type: object
            application/rdf+xml:
              schema:
                type: array
                description: A model containing the Structured Data.
                items:
                  type: object
            text/turtle:
              schema:
                type: array
                description: A model containing the Structured Data.
                items:
                  type: object
        '412':
          description: Invalid request parameters
      security:
        - ApiKey: []
    put:
      tags:
        - Entities
      summary: Update (or create)
      description: Create or update entities by using the provided ids.
      operationId: createOrUpdateEntities
      requestBody:
        content:
          application/ld+json:
            schema:
              type: array
              description: A model containing the Structured Data.
              items:
                type: object
          application/rdf+xml:
            schema:
              type: array
              description: A model containing the Structured Data.
              items:
                type: object
          text/turtle:
            schema:
              type: array
              description: A model containing the Structured Data.
              items:
                type: object
        required: true
      responses:
        '200':
          description: Success
        '412':
          description: Invalid request parameters
      security:
        - ApiKey: []
    post:
      tags:
        - Entities
      summary: Create
      description: Create new entities by automatically generating their id.
      operationId: createEntities
      requestBody:
        content:
          application/ld+json:
            schema:
              type: string
              description: 'The entity request, containing the actual semantic data.'
          application/rdf+xml:
            schema:
              type: string
              description: 'The entity request, containing the actual semantic data.'
          text/turtle:
            schema:
              type: string
              description: 'The entity request, containing the actual semantic data.'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/ld+json:
              schema:
                type: array
                description: A model containing the Structured Data.
                items:
                  type: object
            application/rdf+xml:
              schema:
                type: array
                description: A model containing the Structured Data.
                items:
                  type: object
            text/turtle:
              schema:
                type: array
                description: A model containing the Structured Data.
                items:
                  type: object
        '412':
          description: Invalid request parameters
      security:
        - ApiKey: []
    delete:
      tags:
        - Entities
      summary: Delete
      description: Delete entities with the provided ids.
      operationId: deleteEntities
      parameters:
        - name: id
          in: query
          description: 'One or more ids, in the form of URLs.'
          required: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              format: uri
        - name: include_children
          in: query
          description: >-
            Whether to delete all the entities whose ids start with the provided
            ids, by default false.
          required: false
          schema:
            type: string
            default: 'false'
        - name: include_referenced
          in: query
          description: >-
            Whether to delete all the referenced entities (e.g. in
            `schema:mentions`), by default false.
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        '200':
          description: Success
        '412':
          description: Invalid request parameters
      security:
        - ApiKey: []
    patch:
      tags:
        - Entities
      summary: Patch Entity
      description: Patch entity
      operationId: patchEntities
      parameters:
        - name: id
          in: query
          description: Entity id.
          required: true
          schema:
            type: string
            format: uri
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              description: 'The entity request, containing the actual semantic data.'
              items:
                $ref: '#/components/schemas/EntityPatchRequest'
        required: true
      responses:
        '200':
          description: Success
        '412':
          description: Invalid request parameters
      security:
        - ApiKey: []
  /dataset/batch:
    post:
      tags:
        - Dataset
      summary: Create or update many
      description: Create or update many entities in the Knowledge Graph.
      operationId: createOrUpdateEntities_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: A list of requests
              items:
                $ref: '#/components/schemas/BatchRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
  /dataset:
    post:
      tags:
        - Dataset
      summary: Create or update one
      description: Create or update an entity in the Knowledge Graph.
      operationId: createOrUpdateEntity
      parameters:
        - name: uri
          in: query
          description: The entity's URI
          required: true
          schema:
            type: string
        - name: private
          in: query
          description: Whether the entity should be hidden from Linked Data and GraphQL
          required: false
          schema:
            type: boolean
            default: true
          example: true
      requestBody:
        content:
          application/ld+json:
            schema:
              type: array
              description: A model containing the Structured Data.
              items:
                type: object
        required: true
      responses:
        '200':
          description: Success
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
    delete:
      tags:
        - Dataset
      summary: Delete one
      description: Delete an entity from the Knowledge Graph.
      operationId: deleteEntity
      parameters:
        - name: uri
          in: query
          description: The URI of the entity to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
  /autocomplete:
    get:
      tags:
        - Autocomplete
      summary: Get
      description: >-
        The autocomplete endpoint suggests entities from Linked Data that match
        the provided query.
      operationId: get
      parameters:
        - name: query
          in: query
          description: Autocomplete query
          required: true
          schema:
            type: string
        - name: language
          in: query
          description: '2-letter language code, e.g. ''en''.'
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: Scope
          required: false
          schema:
            type: string
            default: cloud
            enum:
              - cloud
        - name: limit
          in: query
          description: Maximum number of results. By default 10.
          required: false
          schema:
            type: string
            default: '10'
        - name: exclude
          in: query
          description: List of entity URIs to exclude.
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AutocompleteResult'
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
  /dataset/all:
    delete:
      tags:
        - Dataset
      summary: Delete all
      description: Delete all the entities in the Knowledge Graph.
      operationId: deleteAllEntities
      responses:
        '200':
          description: Success
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
  /fact-check/score:
    post:
      summary: Submit a fact-checking request
      operationId: submitFactCheck
      tags:
        - Fact Check
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: >-
                    Aristotele said 'It is the mark of an educated mind to be
                    able to entertain a thought without accepting it.'
      responses:
        '200':
          description: Fact-checking result
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: |-
                      {
                        "@context": "http://schema.org",
                        "@type": "ClaimReview",
                        "claimReviewed": "Aristotle quote 'It is the mark of an educated mind to be able to entertain a thought without accepting it.'",
                        "author": { "@type": "Organization", "name": "WordLift" },
                        "datePublished": "2024-01-17",
                        "reviewRating": {
                          "@type": "Rating",
                          "ratingValue": "5",
                          "alternateName": "True",
                          "bestRating": "5",
                          "worstRating": "1"
                        },
                        "url": "https://fact-check.wordlift.io/review/aristotle-quote",
                        "reviewBody": "The quote 'It is the mark of an educated mind to be able to entertain a thought without accepting it.' is correctly attributable to Aristotle. It has been found in multiple credible sources, including publications of academic texts, reputable quote repositories, and philosophical discussions.",
                        "itemReviewed": {
                          "@type": "CreativeWork",
                          "url": ["https://www.azquotes.com/quote/10261", "https://philosiblog.com/2012/03/07/it-is-the-mark-of-an-educated-mind-to-be-able-to-entertain-a-thought-without-accepting-it/", "https://www.brainyquote.com/quotes/aristotle_100584", "https://www.goodreads.com/quotes/1629-it-is-the-mark-of-an-educated-mind-to-be", "https://www.socratic-method.com/philosophy-quote-meanings/aristotle-it-is-the-mark-of-an-educated-mind-to-be-able-to-entertain-a-thought-without-accepting-it"]
                        }
                      }
  /graphql:
    post:
      tags:
        - GraphQL
      summary: Query
      operationId: graphqlUsingPost
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphqlRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
        '201':
          description: Created
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      x-codegen-request-body-name: body
      security:
        - ApiKey: []
  /accounts:
    get:
      description: List the accounts
      operationId: listAccounts
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - description: Filter accounts that can or cannot do Content Generation
          in: query
          name: can_content_generation
          required: false
          schema:
            type: boolean
        - description: Add entity count data
          in: query
          name: include_entity_count
          required: false
          schema:
            type: boolean
            default: false
        - description: Include all the accounts the user has access to
          in: query
          name: include_all_accounts
          required: false
          schema:
            type: boolean
            default: false
        - description: Include the subscription data
          in: query
          name: include_subscription
          required: false
          schema:
            type: boolean
            default: false
        - description: The URL
          in: query
          name: url
          required: false
          schema:
            type: string
        - description: The dataset id
          in: query
          name: ng_dataset_id
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/vnd.wordlift.accounts+json;version=1:
              schema:
                $ref: '#/components/schemas/PageActiveAccount'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - BasicAuth: []
        - OAuth2: []
      summary: List
      tags:
        - Accounts
  /accounts/me:
    get:
      description: Get the account data for the current account identified by its key.
      operationId: getMe
      responses:
        '200':
          content:
            application/vnd.wordlift.account-info.v2+json:
              schema:
                $ref: '#/components/schemas/AccountInfo'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
      summary: Get
      tags:
        - Account
  /accounts/me/google/searches:
    get:
      description: List the Website Search performance data
      operationId: listWebsiteSearch_1
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: 'The start date, inclusive, in yyyy-MM-dd format.'
          in: query
          name: since
          required: true
          schema:
            type: string
        - description: 'The end date, inclusive, in yyyy-MM-dd format.'
          in: query
          name: until
          required: true
          schema:
            type: string
        - description: >-
            The dimensions, e.g. `query`, `page`. Must repeat for each
            dimension.
          in: query
          name: dimensions
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
        - description: >-
            If "all" (case-insensitive), data will include fresh data. If
            "final" (case-insensitive) or if this parameter is omitted, the
            returned data will include only finalized data.
          in: query
          name: data_state
          required: false
          schema:
            type: string
            enum:
              - all
              - final
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
            maximum: 25000
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebsiteSearch'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
      summary: List Website Search data
      tags:
        - Google Search Console Searches
  /accounts/me/include-excludes:
    get:
      description: List the include and exclude configurations.
      operationId: listIncludeExcludes
      parameters:
        - in: query
          name: account
          required: true
          schema:
            $ref: '#/components/schemas/Account'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncludeExclude'
          description: Success
        '401':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncludeExclude'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncludeExclude'
          description: Not Found
      summary: List
      tags:
        - Include Excludes (WordPress plugin)
    put:
      description: Update the include and exclude configurations.
      operationId: updateIncludeExcludes
      parameters:
        - in: query
          name: account
          required: true
          schema:
            $ref: '#/components/schemas/Account'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IncludeExcludeRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncludeExclude'
          description: Success
        '401':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncludeExclude'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncludeExclude'
          description: Not Found
      summary: Update
      tags:
        - Include Excludes (WordPress plugin)
  /accounts/me/plugin/diagnostics/plugins-collection:
    put:
      description: >-
        Replace the list of the plugins for the current account with the one
        provided by the client
      operationId: updateDiagnosticPluginCollection
      parameters:
        - in: query
          name: account
          required: true
          schema:
            $ref: '#/components/schemas/Account'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DiagnosticPluginRequest'
        required: true
      responses:
        '200':
          description: Found.
        '204':
          description: No Content
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
      summary: Update
      tags:
        - Plugin Diagnostics
  '/accounts/{id}':
    get:
      description: Get the account
      operationId: getAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
        - OAuth2: []
      summary: Get an account.
      tags:
        - Accounts
    put:
      description: Update the account
      operationId: updateAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
        - OAuth2: []
      summary: Update an account.
      tags:
        - Accounts
  /addon/configurations:
    get:
      description: List the Add-ons configurations
      operationId: listConfigurations
      parameters:
        - description: The access token
          in: query
          name: token
          required: false
          schema:
            type: string
        - description: The key
          in: query
          name: key
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAddOnConfiguration'
          description: Found
        '401':
          description: Authentication Failure
      summary: List
      tags:
        - AddOns
  /analytics-imports:
    post:
      description: >-
        Create a Analytics Import using Google Search Console or Botify
        depending on the Account configuration.
      operationId: createAnalyticsImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsImportRequest'
        required: true
      responses:
        '201':
          content:
            application/x-ndjson:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
          description: Success
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
      summary: Create
      tags:
        - Analytics Imports
  /botify-crawl-imports:
    post:
      description: Create a Botify Crawl Import
      operationId: createBotifyCrawlImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotifyCrawlImportRequest'
        required: true
      responses:
        '200':
          content:
            application/x-ndjson:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebPage'
          description: Success
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
      summary: Create
      tags:
        - Botify Crawl Imports
  /data-uri:
    get:
      description: >
        The service will return a Web Data URI only for existing datasets. The
        Web Data URI is not guaranteed to exist (i.e. it may return 404).
      operationId: get1
      parameters:
        - description: The Web Page URL.
          in: query
          name: u
          required: true
          schema:
            type: string
            format: url
      responses:
        '303':
          description: See Other
          headers:
            Location:
              description: '${api.data-uri-controller.get.headers.location.description}'
              schema: {}
              style: simple
      summary: Get the Web Data URI for a Web Page URL.
      tags:
        - Data URI
  /ext/google/searchconsole/searches:
    get:
      description: List the Website Search performance data
      operationId: listWebsiteSearch
      parameters:
        - description: The website URL
          in: query
          name: website
          required: true
          schema:
            type: string
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: 'The start date, inclusive, in yyyy-MM-dd format.'
          in: query
          name: since
          required: true
          schema:
            type: string
        - description: 'The end date, inclusive, in yyyy-MM-dd format.'
          in: query
          name: until
          required: true
          schema:
            type: string
        - description: >-
            The dimensions, e.g. `query`, `page`. Must repeat for each
            dimension.
          in: query
          name: dimensions
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
        - description: >-
            The Google access token, must have access to the Google Search
            Console scope
          in: query
          name: google_access_token
          required: true
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebsiteSearch'
          description: Found
        '401':
          description: Authentication Failure
      summary: List Website Search data
      tags:
        - Google Search Console
  /ext/google/searchconsole/websites:
    get:
      description: List the Websites
      operationId: listWebsites
      parameters:
        - description: >-
            The Google access token, must have access to the Google Search
            Console scope
          in: query
          name: google_access_token
          required: true
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebsite'
          description: Found
        '401':
          description: Authentication Failure
      summary: List
      tags:
        - Google Search Console
  /ext/google/shopping/merchants:
    get:
      description: List the Google Merchants
      operationId: listGoogleMerchants
      parameters:
        - in: query
          name: google_access_token
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMerchantEntry'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: List
      tags:
        - Google Merchants
  /google-search-console/oauth2/auth-code-exchanges:
    post:
      description: >-
        Call this API to have the Platform receive an Authentication Token to
        access the Analytics data via Google Search Console.
      operationId: createAuthCodeExchange
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeAuthCodeRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExchangeAuthCodeResponse'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
      summary: Get an Access Code
      tags:
        - Google Search Console OAuth2
  /google-search-console/oauth2/authorize-uris:
    post:
      description: >-
        Call this API to get an authorization URI needed to interactively get an
        authorization token. Then call the `exchangeAuthCode` to exchange it
        with an authorization token.
      operationId: createAuthorizeUri
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildAuthorizeUriRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BuildAuthorizeUriResponse'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
      summary: Create an Authorization URI
      tags:
        - Google Search Console OAuth2
  /kg/embeddings:
    post:
      description: Create the embedding for the IRIs for the provided query.
      operationId: createEmbedding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
        required: true
      responses:
        '201':
          content:
            application/x-ndjson:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
          description: Success
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
      summary: Create
      tags:
        - Embedding
  /merchants:
    get:
      description: 'List the Merchants, optionally filtering by the `deleted` flag'
      operationId: listMerchants
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
        - description: Filter by the `deleted` flag
          in: query
          name: deleted
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMerchantView'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: List
      tags:
        - Merchants
    post:
      description: Create a Merchant
      operationId: createMerchant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
          description: Success
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - OAuth2: []
      summary: Create
      tags:
        - Merchants
  '/merchants/{id}':
    delete:
      description: Delete a Merchant by its `id`.
      operationId: deleteMerchant
      parameters:
        - description: The Merchant id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: Delete by id
      tags:
        - Merchants
    get:
      description: Get a Merchant by its `id`.
      operationId: getMerchant
      parameters:
        - description: The Merchant id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
          description: Success
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: Get by id
      tags:
        - Merchants
    put:
      description: Update a Merchant
      operationId: updateMerchant
      parameters:
        - description: The Merchant id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
          description: Success
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - OAuth2: []
      summary: Update
      tags:
        - Merchants
  '/merchants/{merchantId}/syncs':
    get:
      description: List the Merchants Syncs
      operationId: listMerchantSyncs
      parameters:
        - description: The Merchant's `id`
          in: path
          name: merchantId
          required: true
          schema:
            type: integer
            format: int64
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
        - description: 'The sorting, `+id` or `-id`'
          in: query
          name: sort
          required: false
          schema:
            type: string
            default: +id
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMerchantSync'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: List
      tags:
        - Merchant Syncs
    post:
      operationId: createSync
      parameters:
        - description: The Merchant's `id`
          in: path
          name: merchantId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MerchantSync'
          description: Found.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: >-
            Another merchant sync is in already in progress. There can only be
            one sync running at a time.
        '401':
          description: Authentication Failure
        '403':
          description: Authorization Failure
      security:
        - OAuth2: []
      summary: Start
      tags:
        - Merchant Syncs
  '/merchants/{merchantId}/syncs/{id}':
    get:
      operationId: getMerchantSync
      parameters:
        - description: The Merchant's `id`
          in: path
          name: merchantId
          required: true
          schema:
            type: integer
            format: int64
        - description: The Merchant Sync `id`.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantSync'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - OAuth2: []
      summary: Get by id
      tags:
        - Merchant Syncs
  /oauth2/authorized-clients:
    get:
      description: List OAuth2 Authorized Clients
      operationId: listOAuth2AuthorizedClients
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOAuth2AuthorizedClient'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: List
      tags:
        - OAuth2 Authorized Clients
    post:
      description: Create a OAuth2 Authorized Client
      operationId: createOAuth2AuthorizedClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizedClientRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2AuthorizedClient'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: Create
      tags:
        - OAuth2 Authorized Clients
  '/oauth2/authorized-clients/{id}':
    delete:
      description: Delete a OAuth2 Authorized Client given its client registration id
      operationId: deleteOAuth2AuthorizedClient
      parameters:
        - description: The Id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: Delete
      tags:
        - OAuth2 Authorized Clients
    get:
      description: Get a OAuth2 Authorized Client given its client registration id
      operationId: getOAuth2AuthorizedClient
      parameters:
        - description: The Id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2AuthorizedClient'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: Get
      tags:
        - OAuth2 Authorized Clients
    put:
      description: Update a OAuth2 Authorized Client given its client registration id
      operationId: updateOAuth2AuthorizedClient
      parameters:
        - description: The Id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizedClientRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2AuthorizedClient'
          description: Found
        '401':
          description: Authentication Failure
      security:
        - OAuth2: []
      summary: Update
      tags:
        - OAuth2 Authorized Clients
  /platform-limit/consumptions/me:
    get:
      description: Get the Platform Consumption for the authenticated user.
      operationId: getMyPlatformConsumption
      parameters:
        - in: query
          name: applies_to
          required: true
          schema:
            type: string
        - in: query
          name: include_subscription
          required: false
          schema:
            type: boolean
        - in: query
          name: include_limit
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWithLimits'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
        - OAuth2: []
      summary: Get the Platform Consumption
      tags:
        - Platform Consumptions
    put:
      description: Create or update the Platform Consumption for the authenticated user.
      operationId: createOrUpdateMyPlatformConsumption
      parameters:
        - in: query
          name: applies_to
          required: true
          schema:
            type: string
        - in: query
          name: consumption_to_add
          required: false
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWithLimits'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
        - OAuth2: []
      summary: Create or update the Platform Consumption
      tags:
        - Platform Consumptions
  /platform-limit/limits:
    get:
      description: List the platform limits.
      operationId: listPlatformLimits
      parameters:
        - description: 'The type of based on, e.g. `sku`.'
          in: query
          name: based_on_in
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - SKU
            uniqueItems: true
        - description: The based on values.
          in: query
          name: based_on_value_in
          required: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
        - description: The applies to (e.g. API name).
          in: query
          name: applies_to_in
          required: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
        - description: The scope.
          in: query
          name: scope_in
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - ACCOUNT
                - SUBSCRIPTION
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePlatformLimit'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
      summary: List Platform Limits
      tags:
        - Platform Limits
    post:
      description: Create a platform limit.
      operationId: createPlatformLimit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformLimitRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformLimit'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
      summary: Create Platform Limit
      tags:
        - Platform Limits
  '/platform-limit/limits/{id}':
    delete:
      description: Delete a platform limit.
      operationId: deletePlatformLimit
      parameters:
        - description: Platform Limit id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
      summary: Delete Platform Limit
      tags:
        - Platform Limits
    get:
      description: Get a platform limit.
      operationId: getPlatformLimit
      parameters:
        - description: Platform Limit id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformLimit'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
      summary: Get Platform Limit
      tags:
        - Platform Limits
    put:
      description: Update a platform limit.
      operationId: updatePlatformLimit
      parameters:
        - description: Platform Limit id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformLimitRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformLimit'
          description: Found
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - BasicAuth: []
      summary: Update Platform Limit
      tags:
        - Platform Limits
  /redeem-codes:
    post:
      operationId: redeemCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: Found.
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Not Found.
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Code already redeemed.
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Configuration error.
      summary: Redeem the provided code and get a key
      tags:
        - Redeem Codes
  /sitemap-imports:
    post:
      description: Create a Sitemap Import
      operationId: createSitemapImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SitemapImportRequest'
        required: true
      responses:
        '200':
          content:
            application/x-ndjson:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebPage'
          description: Success
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
      summary: Create
      tags:
        - Sitemap Imports
  /validations:
    post:
      description: Check if the provided custom domain can be set for the account
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainValidationRequest'
        required: true
      responses:
        '200':
          content:
            application/vnd.wordlift.custom-domain-validation+json;version-1: {}
          description: Success
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - OAuth2: []
      summary: Validate
      tags:
        - Custom Domains
  /vector-search/nodes-collection:
    put:
      operationId: updateNodesCollection
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: A list of node requests.
              items:
                $ref: '#/components/schemas/NodeRequest'
        required: true
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
      summary: Update
      tags:
        - Vector Search Nodes
  /vector-search/queries:
    post:
      operationId: createQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorSearchQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageVectorSearchQueryResponseItem'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
      summary: Create
      tags:
        - Vector Search Queries
  /vector-search/questions-collection:
    post:
      operationId: createVectorSearchQuestion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorSearchQuestionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageVectorSearchQuestionResponseItem'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
      summary: Create
      tags:
        - Vector Search Questions
  /plugin/events:
    get:
      tags:
        - Plugin Events
      summary: List
      description: List the events bound to the authenticated account.
      operationId: listEvents
      parameters:
        - name: url
          in: query
          description: URLs to return
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
        - name: date_greater_than
          in: query
          description: >-
            Event datetime filter to return events with date greater than the
            parameter
          required: false
          schema:
            type: string
            format: date-time
        - name: date_less_than
          in: query
          description: >-
            Event datetime filter to return events with date less than the
            parameter
          required: false
          schema:
            type: string
            format: date-time
        - name: cursor
          in: query
          description: The pagination cursor
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response1'
        '401':
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response1'
      security:
        - ApiKey: []
    post:
      tags:
        - Plugin Events
      summary: Create
      description: Create an event
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request1'
        required: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      security:
        - ApiKey: []
  /summarize:
    post:
      tags:
        - Summarizations
      summary: Create
      operationId: microdataToJsonLdUsingPOST
      parameters:
        - name: max_length
          in: query
          description: Maximum text length
          schema:
            type: integer
            format: int32
            default: 500
        - name: min_length
          in: query
          description: Minimum text length
          schema:
            type: integer
            format: int32
            default: 25
        - name: ratio
          in: query
          description: Ratio
          schema:
            type: number
            format: float
            default: 0.2
      requestBody:
        description: body
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/ld+json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '201':
          description: Created
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      x-codegen-request-body-name: body
      security:
        - ApiKey: []
  /classification/classify:
    post:
      tags:
        - Classifications
      summary: Create
      description: Classify the text to provided categories
      operationId: classifyUsingPost
      parameters:
        - name: lang
          in: query
          description: Language code
          schema:
            type: string
            default: en
        - name: multi_class
          in: query
          description: >-
            When set to true the scores will be independent, each will fall
            between 0 and 1
          schema:
            type: boolean
            default: false
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassificationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ClassificationResponse'
        '201':
          description: Created
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      x-codegen-request-body-name: body
      security:
        - ApiKey: []
  /webasyncs:
    get:
      tags:
        - Web Asyncs metadata
      summary: List
      description: List all Web Async operations.
      operationId: list
      responses:
        '200':
          description: Found.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebAsync'
        '401':
          description: Authentication Failure
      security:
        - ApiKey: []
  '/webasyncs/{id}':
    get:
      tags:
        - Web Asyncs metadata
      summary: Get by id
      description: Get a Web Async operation by its id.
      operationId: get2
      parameters:
        - name: id
          in: path
          description: The Web Async id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebAsync'
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
  '/webasyncs/{id}/pull':
    get:
      tags:
        - Web Asyncs responses
      summary: Get by id
      description: Get a Web Async response by id.
      operationId: get_1
      parameters:
        - name: id
          in: path
          description: The Web Async id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: byte
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - ApiKey: []
  /longtail:
    get:
      tags:
        - Long Tails
      summary: Get entities
      description: Query for long tail opportunities and receive entities.
      operationId: get_2
      parameters:
        - name: q
          in: query
          description: The Longtail query
          required: true
          schema:
            type: string
        - name: ln
          in: query
          description: 'A location name, origin of the search'
          required: true
          schema:
            type: string
          example: 'London,England,United Kingdom'
        - name: lc
          in: query
          description: Language Code
          required: true
          schema:
            type: string
          example: en
        - name: sd
          in: query
          description: Search Domain
          required: true
          schema:
            type: string
          example: 'google.co.uk, google.com.au, google.de, etc.'
        - name: sc
          in: query
          description: Analysis Scope
          required: false
          schema:
            type: string
            enum:
              - all
              - local
              - network
        - name: d
          in: query
          description: The maximum number of results to analyze
          required: false
          schema:
            type: string
            default: '10'
      responses:
        '200':
          description: Found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LongtailResponse'
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /longtail/v2:
    get:
      tags:
        - Long Tails
      summary: Get entities by rank
      description: >-
        Query for long tail opportunities and receive entities along with their
        position in SERP.
      operationId: getV2
      parameters:
        - name: q
          in: query
          description: The Longtail query
          required: true
          schema:
            type: string
        - name: ln
          in: query
          description: 'A location name, origin of the search'
          required: true
          schema:
            type: string
          example: 'London,England,United Kingdom'
        - name: lc
          in: query
          description: Language Code
          required: true
          schema:
            type: string
          example: en
        - name: sd
          in: query
          description: Search Domain
          required: true
          schema:
            type: string
          example: 'google.co.uk, google.com.au, google.de, etc.'
        - name: sc
          in: query
          description: Analysis Scope
          required: false
          schema:
            type: string
            enum:
              - all
              - local
              - network
        - name: d
          in: query
          description: The maximum number of results to analyze
          required: false
          schema:
            type: string
            default: '10'
      responses:
        '200':
          description: Found.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankEntities'
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /longtail/hook:
    get:
      tags:
        - Long Tails
      summary: Get entities by rank (async)
      description: >-
        Query for long tail opportunities and receive entities along with their
        position in SERP.
      operationId: get_3
      parameters:
        - name: q
          in: query
          description: The Longtail query
          required: true
          schema:
            type: string
        - name: ln
          in: query
          description: 'A location name, origin of the search'
          required: true
          schema:
            type: string
          example: 'London,England,United Kingdom'
        - name: lc
          in: query
          description: Language Code
          required: true
          schema:
            type: string
          example: en
        - name: sd
          in: query
          description: Search Domain
          required: true
          schema:
            type: string
          example: 'google.co.uk, google.com.au, google.de, etc.'
        - name: sc
          in: query
          description: Analysis Scope
          required: false
          schema:
            type: string
            enum:
              - all
              - local
              - network
        - name: hk
          in: query
          description: Webhook URL
          required: true
          schema:
            type: string
        - name: d
          in: query
          description: The maximum number of results to analyze
          required: false
          schema:
            type: string
            default: '10'
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /api/embeddings:
    post:
      responses: {}
      tags:
        - Embeddings
      operationId: create_embeddings
      summary: Create Embeddings
      description: Create Embeddings
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingsInput'
        required: true
  /completions:
    post:
      description: >-
        [GET with body
        payload](https://opensource.zalando.com/restful-api-guidelines/#get-with-body)
        - no resources created
      operationId: createCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Create a completion
      tags:
        - Content Generation Completion
  /content-generations:
    get:
      operationId: listContentGenerations
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
        - description: Filter for the deleted flag
          in: query
          name: deleted
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContentGeneration'
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List
      tags:
        - Content Generations
    post:
      operationId: createContentGeneration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentGenerationRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGeneration'
          description: Created
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Create
      tags:
        - Content Generations
  /content-generations/renders:
    post:
      description: >-
        [GET with body
        payload](https://opensource.zalando.com/restful-api-guidelines/#get-with-body)
        - no resources created
      operationId: renderTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenderRequest'
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Render
      tags:
        - Content Generation Renders
  /content-generations/renders-collection:
    post:
      description: >-
        [GET with body
        payload](https://opensource.zalando.com/restful-api-guidelines/#get-with-body)
        - no resources created
      operationId: renderTemplateCollection
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RenderRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Render
      tags:
        - Content Generation Renders
  '/content-generations/{contentGenerationId}/fields':
    get:
      operationId: listFields
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageField'
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List
      tags:
        - Content Generation Fields
  '/content-generations/{contentGenerationId}/records':
    get:
      operationId: listRecords
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
        - description: Search query
          in: query
          name: q
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRecord'
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List
      tags:
        - Content Generation Records
    put:
      operationId: updateRecords
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - description: Completion accepted
          in: query
          name: is_accepted
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecordsRequest'
        required: true
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Content Generation Records
  '/content-generations/{contentGenerationId}/records-collection':
    put:
      operationId: updateRecordsCollection
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRecordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Content Generation Records
  '/content-generations/{contentGenerationId}/records-sse':
    get:
      operationId: listRecordsAsEvents
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List as Events
      tags:
        - Content Generation Records
  '/content-generations/{contentGenerationId}/records.tsv':
    get:
      operationId: export
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            text/tsv:
              schema:
                type: array
                items:
                  type: string
          description: OK
      security:
        - security_oauth2: []
      tags:
        - Content Generation Records Export
  '/content-generations/{contentGenerationId}/records/{recordId}':
    get:
      operationId: getRecord
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - description: The Record id.
          in: path
          name: recordId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Get
      tags:
        - Content Generation Records
    put:
      operationId: updateRecord
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - description: The Record id.
          in: path
          name: recordId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request2'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Content Generation Records
  '/content-generations/{contentGenerationId}/stats':
    get:
      operationId: get3
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGenerationStats'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Get
      tags:
        - Content Generation Stats
  '/content-generations/{contentGenerationId}/syncs':
    post:
      operationId: createSync1
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Create
      tags:
        - Content Generation Syncs
  '/content-generations/{contentGenerationId}/words':
    get:
      operationId: listWords
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: The cursor.
          required: false
          schema:
            type: string
        - in: query
          name: The maximum number of results.
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWord'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: List
      tags:
        - Content Generation Word biases
    post:
      operationId: createWord
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WordRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Word'
          description: Created
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Create
      tags:
        - Content Generation Word biases
    put:
      description: >-
        Send a list of word biases for this prompt. Existing words will be
        deleted.
      operationId: createWords
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WordRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Word'
          description: Created
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update for prompt
      tags:
        - Content Generation Word biases
  '/content-generations/{contentGenerationId}/words/imports':
    put:
      operationId: createWordsFromCSV
      parameters:
        - in: header
          name: content-type
          required: false
          schema:
            type: string
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          text/csv:
            schema:
              type: string
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update from CSV
      tags:
        - Content Generation Word biases
  '/content-generations/{contentGenerationId}/words/{id}':
    delete:
      operationId: deleteWord
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - description: The Word to delete.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Created
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Delete
      tags:
        - Content Generation Word biases
    put:
      operationId: updateWord
      parameters:
        - description: The Content Generation id.
          in: path
          name: contentGenerationId
          required: true
          schema:
            type: integer
            format: int64
        - description: The Word bias to update.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Word'
          description: Updated
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Content Generation Word biases
  '/content-generations/{from_content_generation_id}/duplicates':
    post:
      operationId: duplicateContentGeneration
      parameters:
        - description: The Content Generation id to duplicate from.
          in: path
          name: from_content_generation_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGeneration'
          description: Created
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Duplicate
      tags:
        - Content Generations
  '/content-generations/{id}':
    delete:
      operationId: deleteContentGeneration
      parameters:
        - description: The Content Generation id.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Delete
      tags:
        - Content Generations
    get:
      operationId: getContentGeneration
      parameters:
        - description: The Content Generation id.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGeneration'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Get
      tags:
        - Content Generations
    put:
      operationId: updateContentGeneration
      parameters:
        - description: The Content Generation id.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentGenerationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGeneration'
          description: Update
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Content Generations
  /fields:
    post:
      operationId: listFieldsForGraphQlQuery
      requestBody:
        content:
          application/graphql:
            schema:
              type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List for GraphQl Query
      tags:
        - Content Generation Fields
  /graphql-query-presets:
    get:
      operationId: listPresets
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePreset'
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List
      tags:
        - Content Generation Presets
  /models:
    get:
      operationId: listModels
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageModel'
          description: Found.
        '401':
          description: Authentication Failure
      summary: List
      tags:
        - Content Generation Models
  /questions-and-answers:
    get:
      operationId: getQuestionsAndAnswers
      parameters:
        - description: The account id.
          in: query
          name: account_id
          required: false
          schema:
            type: integer
            format: int64
        - description: The webpage IRI
          in: query
          name: iri
          required: false
          schema:
            type: string
        - description: The smart content id.
          in: query
          name: smart_content_id
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionAndAnswer'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Get
      tags:
        - QuestionsAndAnswers
    post:
      operationId: createQuestionAndAnswer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionAndAnswerRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionAndAnswer'
          description: Created
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Create
      tags:
        - QuestionsAndAnswers
  /questions-and-answers-collection:
    delete:
      operationId: deleteQuestionsAndAnswersCollection
      parameters:
        - in: query
          name: smart_content_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Delete
      tags:
        - QuestionsAndAnswers
    post:
      operationId: createQuestionsAndAnswersCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartContentRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartContent'
          description: Created
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Create
      tags:
        - QuestionsAndAnswers
    put:
      operationId: updateQuestionsAndAnswersCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionAndAnswerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionAndAnswer'
          description: Found.
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - QuestionsAndAnswers
  '/questions-and-answers/{id}':
    delete:
      operationId: deleteQuestionAndAnswer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Delete
      tags:
        - QuestionsAndAnswers
    put:
      operationId: updateQuestionAndAnswer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuestionAndAnswerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionAndAnswer'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - QuestionsAndAnswers
  /rules:
    get:
      operationId: listRules
      parameters:
        - description: The cursor
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: The maximum number of results
          in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
        - description: 'The project id - if provided, must also provide the project type'
          in: query
          name: project_id
          required: false
          schema:
            type: integer
            format: int64
        - description: 'The project type - if provided, must also provide the project id'
          in: query
          name: project_type
          required: false
          schema:
            $ref: '#/components/schemas/ProjectType'
        - description: The scope
          in: query
          name: scope
          required: false
          schema:
            $ref: '#/components/schemas/Scope'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRule'
          description: Found.
        '400':
          description: Bad request
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: List
      tags:
        - Rules
    post:
      operationId: createRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: Created
        '400':
          description: Bad request
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Create
      tags:
        - Rules
  /rules-collection:
    put:
      operationId: updateRuleCollection
      parameters:
        - description: The project id
          in: query
          name: project_id
          required: true
          schema:
            type: integer
            format: int64
        - description: The project type
          in: query
          name: project_type
          required: true
          schema:
            $ref: '#/components/schemas/ProjectType'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
          description: Found.
        '400':
          description: Bad request
        '401':
          description: Authentication Failure
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Rules
  /rules/copies:
    post:
      operationId: copyRules
      parameters:
        - description: The project type
          in: query
          name: project_type
          required: true
          schema:
            $ref: '#/components/schemas/ProjectType'
        - description: The source Content Generation id.
          in: query
          name: from_project_id
          required: true
          schema:
            type: integer
            format: int64
        - description: The target Content Generation id.
          in: query
          name: to_project_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Created
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Copy
      tags:
        - Rules
  '/rules/{id}':
    delete:
      operationId: deleteRule
      parameters:
        - description: The id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Delete
      tags:
        - Rules
    put:
      operationId: updateRule
      parameters:
        - description: The id
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: Found.
        '401':
          description: Authentication Failure
        '404':
          description: Not Found
      security:
        - security_oauth2: []
      summary: Update
      tags:
        - Rules
  /score:
    post:
      tags:
        - SEO Scores
      summary: Create
      operationId: createSEOScore
      requestBody:
        description: body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: >-
                    URL of the content to be analyzed. Mutually exclusive with
                    text.
                text:
                  type: string
                  description: >-
                    A paragraph of text content to be analyzed. Mutually
                    exclusive with URL.
                keyword:
                  type: string
                  description: Keyword or query related to the content.
                description_narrative:
                  type: string
                  description: Narrative description of the intent behind the query.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyze:
                    type: string
                    example: '[{"M": 2, "T": 2, "O": 2}]'
                    description: >-
                      Traffic light system indicating the match. M for match, T
                      for trustworthiness, O for overall score.
        '400':
          description: Bad request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal server error
          content: {}
      security:
        - ApiKey: []
  /build:
    post:
      tags:
        - Sitemap Generator
      summary: Generate Sitemap
      description: >
        Generates a sitemap from a GraphQL query to WordLift KG. You must
        provide a valid GraphQL query as the request body.
      operationId: generateSitemap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: >-
                    { foodEstablishments { name: string(name: "schema:name")
                    url: string(name: "schema:url") }}
                operationName:
                  type: string
                  example: Operations
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  sitemap:
                    type: string
                    description: The generated sitemap in XML format.
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      security:
        - apiKeyAuth: []
  /microdata-to-jsonld:
    get:
      tags:
        - Microdata
      summary: Microdata to JSON-LD
      description: 'Provided a URL, converts any microdata found on that URL to JSON-LD.'
      operationId: microdataToJsonLd
      parameters:
        - name: u
          in: query
          description: The web page URL
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found.
          content:
            application/ld+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /inspect:
    get:
      tags:
        - Inspector
      summary: Inspect
      description: >-
        Inspect a URL to perform a variety of tasks defined by the list of
        applied filters.
      operationId: get4
      parameters:
        - name: u
          in: query
          description: The URL to inspect
          required: true
          schema:
            type: string
          example: 'https://wordlift.io'
        - name: f
          in: query
          description: >-
            Filters to be applied on the result, if you want to apply multiple
            filters they should be separated by comma
          required: true
          schema:
            type: string
            example: validator
            enum:
              - validator
              - content-analysis
              - mock-language-detection
              - browser-response
              - jena-graph
              - links
              - browser-response
              - lingua-language-detection
              - language-detection
              - redlink-content-analysis
              - summarize
              - text
              - validator
              - xmltei
              - classify
          example: 'validator,content-analysis'
        - name: classes
          in: query
          description: A list of categories to be provided for classify filter.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectResponse'
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /v2/analyze:
    post:
      tags:
        - Analyses
      summary: Analyse Web Page
      description: >-
        Analyse the content of a webpage by using the `url` property of the
        request.
      operationId: v2Analysis
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request3'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response2'
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /single:
    post:
      tags:
        - Analyses
      summary: Analyse content
      description: Analyze the content provided with the request.
      operationId: analyse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request3'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response2'
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /merge:
    post:
      tags:
        - Analyses
      summary: Analyse and Merge
      description: Analyze content and return the results merged as HTML code.
      operationId: merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request3'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/html:
              schema:
                type: string
        '401':
          description: Authentication Failure
        '500':
          description: Server Error
      security:
        - ApiKey: []
  /entity-gaps:
    post:
      tags:
        - Entity Gaps
      summary: Create
      description: Create an Entity Gaps analysis.
      operationId: createEntityGap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityGapRequest'
        required: true
      responses:
        '200':
          description: Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysesResponse'
        '401':
          description: Authentication Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysesResponse'
        '500':
          description: 'Uh oh, something went wrong'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysesResponse'
      security:
        - ApiKey: []
  /content-expansions:
    post:
      tags:
        - Content Expansions
      summary: Create
      description: Create a Content Expansion
      operationId: createContentExpansion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentExpansionRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentExpansionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentExpansionResponse'
        '500':
          description: 'Uh oh, something went wrong'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentExpansionResponse'
      security:
        - ApiKey: []
  /analysis/analyses:
    post:
      tags:
        - Analyses
      summary: Create
      description: Create an analysis request
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysesRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/x.wordlift.analysis+json;version=3:
              schema:
                $ref: '#/components/schemas/AnalysesResponse'
        '401':
          description: Unauthorized
          content:
            application/x.wordlift.analysis+json;version=3:
              schema:
                $ref: '#/components/schemas/AnalysesResponse'
        '500':
          description: 'Uh oh, something went wrong'
          content:
            application/x.wordlift.analysis+json;version=3:
              schema:
                $ref: '#/components/schemas/AnalysesResponse'
      security:
        - ApiKey: []
components:
  schemas:
    BatchRequest:
      required:
        - model
        - uri
      type: object
      properties:
        uri:
          type: string
          description: The entity URI.
        model:
          type: array
          description: A model containing the Structured Data.
          items:
            type: object
        private:
          type: boolean
          description: Whether the entity should be hidden from Linked Data and GraphQL.
          example: true
      description: A request part of a batch.
    EntityPatchRequest:
      type: object
      properties:
        op:
          type: string
          enum:
            - ADD
            - REMOVE
            - REPLACE
            - MOVE
            - COPY
            - TEST
        path:
          type: string
        value:
          type: array
          description: A model containing the Structured Data.
          items:
            type: object
    AutocompleteResult:
      type: object
      properties:
        id:
          type: string
          format: uri
        labels:
          type: array
          items:
            type: string
        descriptions:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            type: string
            format: url
        urls:
          type: array
          items:
            type: string
            format: url
        images:
          type: array
          description: A list of image URLs.
          items:
            type: string
            description: A list of image URLs.
            format: url
        sameAss:
          type: array
          items:
            type: string
            format: url
        scope:
          type: string
          enum:
            - local
            - network
            - cloud
        description:
          type: string
        mainType:
          type: string
          description: Schema type slug
        label:
          type: string
        value:
          type: string
        displayTypes:
          type: string
    GraphqlRequest:
      title: GraphqlRequest
      type: object
      properties:
        query:
          type: string
    Account:
      type: object
      properties:
        analytics_client_factory:
          type: string
        analyzerId:
          type: integer
          format: int64
        botify_project:
          type: string
        botify_token:
          type: string
        botify_username:
          type: string
        country:
          type: string
        datasetId:
          type: string
          deprecated: true
        datasetUri:
          type: string
        domainUri:
          type: string
        google_search_console_site_url:
          type: string
        id:
          type: integer
          format: int64
        indexed:
          type: boolean
        is_wordpress:
          type: boolean
        key:
          type: string
        language:
          type: string
        ngDatasetId:
          type: string
        resolvedUrl:
          type: string
        subscriptionId:
          type: integer
          format: int64
        url:
          type: string
        wpAdmin:
          type: string
        wpJson:
          type: string
        wp_include_exclude_default:
          type: string
    AccountInfo:
      type: object
      description: Account Information
      properties:
        accountId:
          type: integer
          format: int64
          description: The Account Id
          readOnly: true
        datasetId:
          type: string
          description: The Dataset Id
          readOnly: true
        datasetUri:
          type: string
          description: The dataset URI
          readOnly: true
        features:
          type: object
          additionalProperties:
            type: boolean
            description: A list of features enabled or disabled for the account
            readOnly: true
          description: A list of features enabled or disabled for the account
          readOnly: true
        googleSearchConsoleSiteUrl:
          type: string
          description: Google Search Console Site URL
          readOnly: true
        key:
          type: string
          description: The Key
          readOnly: true
        language:
          type: string
          description: The language code
          readOnly: true
        networks:
          type: array
          description: A list of connected Account Information
          items:
            $ref: '#/components/schemas/NetworkAccountInfo'
          readOnly: true
        ngDatasetId:
          type: string
        subscriptionId:
          type: integer
          format: int64
          description: The Subscription Id
          readOnly: true
        url:
          type: string
          description: The website URL
          readOnly: true
        wpAdmin:
          type: string
          description: 'If WordPress, the WP-ADMIN URL'
          readOnly: true
        wpJson:
          type: string
          description: 'If WordPress, the WP-JSON end-point'
          readOnly: true
      required:
        - accountId
        - datasetUri
        - networks
        - subscriptionId
    AccountSubscription:
      type: object
      properties:
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        order_id:
          type: integer
          format: int64
        sku:
          type: string
    ActiveAccount:
      type: object
      description: An array of objects.
      properties:
        country:
          type: string
        diagnostic_plugins:
          type: array
          items:
            $ref: '#/components/schemas/DiagnosticPlugin'
        domain_uri:
          type: string
        google_search_console_site_url:
          type: string
        id:
          type: integer
          format: int64
        is_wordpress:
          type: boolean
        key:
          type: string
        language:
          type: string
        ng_dataset_id:
          type: string
        package_type:
          type: string
        subscription:
          $ref: '#/components/schemas/AccountSubscription'
        subscription_id:
          type: integer
          format: int64
        total_entities:
          type: integer
          format: int64
        total_entities_with_schema_url:
          type: integer
          format: int64
        url:
          type: string
        user_id:
          type: integer
          format: int64
        wp_admin:
          type: string
        wp_include_exclude_default:
          type: string
        wp_json:
          type: string
    AddOnConfiguration:
      type: object
      description: An Add-On configuration
      properties:
        can_do_content_expansion:
          type: boolean
          description: Whether this Add-on can do content expansion
          readOnly: true
        can_import_to_wordpress:
          type: boolean
          description: Whether this Add-on can import to WordPress.
          readOnly: true
        key:
          type: string
          description: A key
          readOnly: true
        wp_admin:
          type: string
          description: The wp-admin endpoint for a website using the key.
          readOnly: true
        wp_json:
          type: string
          description: The wp-json endpoint for a website using the key.
          readOnly: true
    AnalyticsImportRequest:
      type: object
      description: An Analytics Import request.
      properties:
        urls:
          type: array
          description: An array of URLs.
          items:
            type: string
            description: An array of URLs.
          uniqueItems: true
    BotifyCrawlImportRequest:
      type: object
      description: The Botify Crawl Import request
      properties:
        collection:
          type: string
        description:
          type: array
          items:
            type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        headline:
          type: string
        request_embeddings:
          type: array
          items:
            type: string
        text:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            type: string
        url:
          type: string
    BuildAuthorizeUriRequest:
      type: object
      description: The request of the `buildAuthorizeUri` endpoint.
      properties:
        redirect_uri:
          type: string
          description: >-
            The Redirect URI to where redirect the Client after successful
            authentication.
      required:
        - redirect_uri
    BuildAuthorizeUriResponse:
      type: object
      description: The response of the `buildAuthorizeUri` endpoint.
      properties:
        authorize_uri:
          type: string
          description: The Authorization URI. The Client should be redirected to this URI.
      required:
        - authorize_uri
    DiagnosticPlugin:
      type: object
      description: Plugin Data used for diagnostics
      properties:
        account_id:
          type: integer
          format: int64
          description: The account id.
          readOnly: true
        active:
          type: boolean
          description: Whether the plugin is active.
        created_at:
          type: string
          format: date-time
          description: The create date-time
          readOnly: true
        id:
          type: integer
          format: int64
          description: The record id.
          readOnly: true
        name:
          type: string
          description: The plugin name.
        version:
          type: string
          description: The plugin version.
    DiagnosticPluginRequest:
      type: object
      description: Diagnostic Plugin Data Request
      properties:
        active:
          type: boolean
          description: Whether the plugin is active.
        name:
          type: string
          description: The plugin name.
        version:
          type: string
          description: The plugin version.
    DomainValidationRequest:
      type: object
      properties:
        dataset_domain:
          type: string
          description: 'The dataset domain, e.g. data.example.org'
        dataset_name:
          type: string
          description: 'The dataset name, e.g. my-dataset-name'
      required:
        - dataset_domain
        - dataset_name
    EmbeddingRequest:
      type: object
      properties:
        graphql_query:
          type: string
        properties:
          type: array
          items:
            type: string
          uniqueItems: true
    ExchangeAuthCodeRequest:
      type: object
      description: The request of the `exchangeAuthCode` endpoint.
      properties:
        code:
          type: string
          description: >-
            The Authorization Code. The API will use the Authorization Code to
            exchange it with an Access Token.
        google_search_console_resource_id:
          type: string
          description: >-
            The Google Search Console Resource Id as it shows in the Google
            Search Console, e.g. sc-domain:example.org.
      required:
        - code
        - google_search_console_resource_id
    ExchangeAuthCodeResponse:
      type: object
      description: The response of the `buildAuthorizeUri` endpoint.
      properties:
        access_token:
          type: string
          description: The access token
        expires_in:
          type: integer
          format: int32
          description: The number of seconds for the access token to expire
        refresh_token:
          type: string
          description: The refresh token
        scope:
          type: string
          description: The scope
        token_type:
          type: string
          description: 'The token type, usually Bearer'
    Filter:
      type: object
      description: A query request filter.
      properties:
        key:
          type: string
          description: The filter key.
        operator:
          type: string
          description: A query request filter operator.
          enum:
            - EQ
            - GT
            - LT
            - NE
            - GTE
            - LTE
            - IN
            - NIN
        value:
          type: object
          description: The filter value.
          oneOf:
            - type: string
            - type: object
      required:
        - key
        - operator
        - value
    IncludeExclude:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          readOnly: true
          title: Account unique identifier
        flag:
          type: string
          description: A flag which determines whether the URL is `INCLUDE` or `EXCLUDE`.
          enum:
            - INCLUDE
            - EXCLUDE
          title: Include or Exclude
        id:
          type: integer
          format: int64
          readOnly: true
          title: Unique identifier
        url:
          type: string
          title: The URL
      required:
        - account_id
        - flag
        - url
    IncludeExcludeRequest:
      type: object
      description: A request to create an IncludeExclude.
      properties:
        Include or Exclude:
          type: string
          description: A flag which determines whether the URL is `INCLUDE` or `EXCLUDE`.
          enum:
            - INCLUDE
            - EXCLUDE
        The URL:
          type: string
      required:
        - Include or Exclude
        - The URL
    Merchant:
      type: object
      description: A Merchant project.
      properties:
        access_token:
          type: string
          description: The Google merchant access token
        account_id:
          type: integer
          format: int64
          description: The account id
          readOnly: true
        automatic_synchronization:
          type: boolean
          description: Whether the Merchant data will be synchronized automatically
        created_at:
          type: string
          format: date-time
          description: The create date-time
          readOnly: true
        dataset_domain:
          type: string
          description: The custom domain (for example data.example.org)
        dataset_name:
          type: string
          description: The dataset path (for example /data)
        deleted:
          type: boolean
          default: false
          description: True if the merchant has been deleted
        deleted_at:
          type: string
          format: date-time
          description: The delete date-time
          readOnly: true
        google_merchant_id:
          type: integer
          format: int64
          description: The Google Merchant id
        id:
          type: integer
          format: int64
          description: The unique id
          readOnly: true
        ignore_brand:
          type: boolean
          description: Whether to ignore the `brand` property during validation
        ignore_image:
          type: boolean
          description: Whether to ignore the `image` property during validation
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time
          readOnly: true
        publisher_name:
          type: string
          description: The publisher name (shows in schema publisher)
        refresh_token:
          type: string
          description: The Google merchant refresh token
        url:
          type: string
          description: The website URL
        writer_service:
          type: string
          description: >-
            How to write the merchant data to the graph, if unsure, do not set
            anything (by default `wordpressMerchantWriter`).
      required:
        - access_token
        - deleted
        - google_merchant_id
        - publisher_name
        - refresh_token
    MerchantEntry:
      type: object
      description: A Merchant Entry with the Google Merchant Id and the Website URL
      properties:
        google_merchant_id:
          type: integer
          format: int64
          description: The Google Merchant id
        website_url:
          type: string
          description: The Google Merchant Website URL
      required:
        - google_merchant_id
        - website_url
    MerchantRequest:
      type: object
      description: The Merchant request
      properties:
        access_token:
          type: string
          description: Google Merchant access token
        dataset_domain:
          type: string
          description: The custom domain (for example data.example.org)
        dataset_name:
          type: string
          description: The dataset path (for example "data")
        deleted:
          type: boolean
          default: false
          description: True if the merchant has been deleted
        google_merchant_id:
          type: integer
          format: int64
          description: The Google Merchant id
        ignore_brand:
          type: boolean
          description: Whether to ignore the `brand` property during validation
        ignore_image:
          type: boolean
          description: Whether to ignore the `image` property during validation
        publisher_name:
          type: string
          description: The publisher name (shows in schema publisher)
        refresh_token:
          type: string
          description: Google Merchant refresh token
        url:
          type: string
          description: The website URL
        writer_service:
          type: string
          description: >-
            How to write the merchant data to the graph, if unsure, do not set
            anything (by default `wordpressMerchantWriter`).
      required:
        - google_merchant_id
        - publisher_name
        - refresh_token
        - url
    MerchantSync:
      type: object
      description: A Merchant products data synchronization.
      properties:
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        error_reason:
          type: string
          description: Error that caused the synchronization to fail.
          maxLength: 500
          minLength: 0
          readOnly: true
        has_errors:
          type: boolean
          description: Whether the sync encountered errors.
          readOnly: true
        id:
          type: integer
          format: int64
          description: The unique id.
          readOnly: true
        merchant_id:
          type: integer
          format: int64
          description: The parent Merchant id.
          readOnly: true
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        products_created:
          type: integer
          format: int32
          description: The number of created products
          readOnly: true
        products_deleted:
          type: integer
          format: int32
          description: The number of deleted products
          readOnly: true
        products_errored:
          type: integer
          format: int32
          description: The number of errored products
          readOnly: true
        products_skipped:
          type: integer
          format: int32
          description: The number of skipped products
          readOnly: true
        products_total:
          type: integer
          format: int32
          description: >-
            The total number of processed products, including the skipped and
            errored.
          readOnly: true
        products_updated:
          type: integer
          format: int32
          description: The number of update products
          readOnly: true
        started_at:
          type: string
          format: date-time
          description: The started date-time.
          readOnly: true
        stopped_at:
          type: string
          format: date-time
          description: The stopped date-time.
          readOnly: true
      required:
        - merchant_id
    MerchantView:
      type: object
      description: An array of objects.
      properties:
        access_token:
          type: string
          description: The Google merchant access token
        account_id:
          type: integer
          format: int64
          description: The account id
          readOnly: true
        automatic_synchronization:
          type: boolean
          description: Whether the Merchant data will be synchronized automatically
        created_at:
          type: string
          format: date-time
          description: The create date-time
          readOnly: true
        dataset_domain:
          type: string
          description: The custom domain (for example data.example.org)
        dataset_name:
          type: string
          description: The dataset path (for example /data)
        deleted:
          type: boolean
          default: false
          description: True if the merchant has been deleted
        deleted_at:
          type: string
          format: date-time
          description: The delete date-time
          readOnly: true
        google_merchant_id:
          type: integer
          format: int64
          description: The Google Merchant id
        id:
          type: integer
          format: int64
          description: The unique id
          readOnly: true
        ignore_brand:
          type: boolean
          description: Whether to ignore the `brand` property during validation
        ignore_image:
          type: boolean
          description: Whether to ignore the `image` property during validation
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time
          readOnly: true
        publisher_name:
          type: string
          description: The publisher name (shows in schema publisher)
        refresh_token:
          type: string
          description: The Google merchant refresh token
        sid:
          type: string
        sync_has_errors:
          type: boolean
        sync_id:
          type: integer
          format: int64
        sync_products_created:
          type: integer
          format: int32
        sync_products_deleted:
          type: integer
          format: int32
        sync_products_errored:
          type: integer
          format: int32
        sync_products_skipped:
          type: integer
          format: int32
        sync_products_total:
          type: integer
          format: int32
        sync_products_updated:
          type: integer
          format: int32
        sync_started_at:
          type: string
          format: date-time
          description: The started date-time.
          readOnly: true
        sync_stopped_at:
          type: string
          format: date-time
          description: The stopped date-time.
          readOnly: true
        url:
          type: string
          description: The website URL
        writer_service:
          type: string
          description: >-
            How to write the merchant data to the graph, if unsure, do not set
            anything (by default `wordpressMerchantWriter`).
      required:
        - access_token
        - deleted
        - google_merchant_id
        - publisher_name
        - refresh_token
    NetworkAccountInfo:
      type: object
      description: Network Account Information
      properties:
        accountId:
          type: integer
          format: int64
          description: The Account Id
          readOnly: true
        datasetId:
          type: string
          description: The Dataset Id
          readOnly: true
        datasetUri:
          type: string
          description: The Dataset URI
          readOnly: true
        url:
          type: string
          description: The website URL
          readOnly: true
      readOnly: true
      required:
        - datasetUri
    NodeRequest:
      type: object
      description: A node request.
      properties:
        embeddings:
          type: array
          description: A list of embeddings.
          items:
            type: number
            format: double
            description: A list of embeddings.
        entity_id:
          type: string
          description: >-
            The entity id in the form on an IRI, e.g.
            https://data.example.org/dataset/entity.
        metadata:
          type: object
          additionalProperties:
            type: object
            description: A map of metadata properties.
          description: A map of metadata properties.
        node_id:
          type: string
          description: The node id generally expressed in the form of a UUID.
        text:
          type: string
          description: The original text.
      required:
        - entity_id
        - node_id
    OAuth2AuthorizedClient:
      type: object
      description: A OAuth2 Authorized Client
      properties:
        access_token_expires_at:
          type: string
          format: date-time
        access_token_issued_at:
          type: string
          format: date-time
        access_token_scopes:
          type: string
        access_token_type:
          type: string
        access_token_value:
          type: string
        client_registration_id:
          type: string
        id:
          type: integer
          format: int64
        principal_name:
          type: string
        refresh_token_issued_at:
          type: string
          format: date-time
        refresh_token_value:
          type: string
    OAuth2AuthorizedClientRequest:
      type: object
      description: The OAuth2 Authorized Client request
      properties:
        access_token_expires_at:
          type: string
          format: date-time
          description: When the Access Token expires
        access_token_issued_at:
          type: string
          format: date-time
          description: When the Access Token was issued
        access_token_scopes:
          type: string
          description: The Access Token scopes
        access_token_type:
          type: string
          description: The Access Token Type
        access_token_value:
          type: string
          description: The Access Token Value
        client_registration_id:
          type: string
          description: The Client Registration Id
        principal_name:
          type: string
          description: The Principal Name
        refresh_token_issued_at:
          type: string
          format: date-time
          description: When the Access Token was issued
        refresh_token_value:
          type: string
          description: The Refresh Token Value
    PageActiveAccount:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/ActiveAccount'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageAddOnConfiguration:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/AddOnConfiguration'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageMerchantEntry:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/MerchantEntry'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageMerchantSync:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/MerchantSync'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageMerchantView:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/MerchantView'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageOAuth2AuthorizedClient:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/OAuth2AuthorizedClient'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PagePlatformLimit:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/PlatformLimit'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageVectorSearchQueryResponseItem:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/VectorSearchQueryResponseItem'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageVectorSearchQuestionResponseItem:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/VectorSearchQuestionResponseItem'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageWebsite:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Website'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageWebsiteSearch:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/WebsiteSearch'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageWithLimits:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/WithLimits'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PlatformLimit:
      type: object
      properties:
        applies_to:
          type: string
        based_on:
          type: string
          enum:
            - SKU
        based_on_value:
          type: string
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        description:
          type: string
        id:
          type: integer
          format: int64
        limits:
          type: integer
          format: int32
          minimum: 1
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        scope:
          type: string
          enum:
            - ACCOUNT
            - SUBSCRIPTION
      required:
        - applies_to
        - based_on
        - based_on_value
        - limits
        - scope
    PlatformLimitRequest:
      type: object
      description: Platform Limit request
      properties:
        applies_to:
          type: string
        based_on:
          type: string
          enum:
            - SKU
        based_on_value:
          type: string
        description:
          type: string
        limits:
          type: integer
          format: int32
          minimum: 1
        scope:
          type: string
          enum:
            - ACCOUNT
            - SUBSCRIPTION
      required:
        - applies_to
        - based_on
        - based_on_value
        - limits
        - scope
    ProblemDetail:
      type: object
      properties:
        detail:
          type: string
        instance:
          type: string
          format: uri
        properties:
          type: object
          additionalProperties:
            type: object
        status:
          type: integer
          format: int32
        title:
          type: string
        type:
          type: string
          format: uri
    Request:
      type: object
      properties:
        redeem_code:
          type: string
    Response:
      type: object
      properties:
        key:
          type: string
    SitemapImportRequest:
      type: object
      description: The Sitemap Import request
      properties:
        sitemap_url:
          type: string
          description: The sitemap URL
        urls:
          type: array
          description: The URLs
          items:
            type: string
            description: The URLs
          uniqueItems: true
    UpdateAccountRequest:
      type: object
      properties:
        country:
          type: string
        language:
          type: string
        url:
          type: string
    VectorSearchQueryRequest:
      type: object
      description: A query request.
      properties:
        fields:
          type: array
          description: List of extra fields to be retrieved.
          items:
            type: string
            description: List of extra fields to be retrieved.
          uniqueItems: true
        filters:
          type: array
          description: A list of prefilters.
          items:
            $ref: '#/components/schemas/Filter'
        query_embedding:
          type: array
          description: 'The list of embeddings, not required if `query_string` is provided.'
          items:
            type: number
            format: double
            description: >-
              The list of embeddings, not required if `query_string` is
              provided.
        query_string:
          type: string
          description: >-
            The query string, not required if the `query_embeddings` are
            provided. Please note that the `query_string` is ignored if the
            `query_embeddings` are provided.
        query_uri:
          type: string
          format: uri
          description: >-
            Perform a Vector Search based on similarities with an entity with
            the specified URI.
        query_url:
          type: string
          format: url
          description: >-
            Perform a Vector Search based on similarities with an entity with
            the specified URL (schema:url).
        similarity_top_k:
          type: integer
          format: int32
          default: 2
          description: The similarity top K.
          minimum: 1
    VectorSearchQueryResponseItem:
      type: object
      description: An array of objects.
      properties:
        fields:
          type: object
          additionalProperties:
            type: array
            description: >-
              Map of extra retrieved fields. The values of the requested fields
              are always returned in an array.If no value is found an empty
              array is returned.
            items:
              type: object
              description: >-
                Map of extra retrieved fields. The values of the requested
                fields are always returned in an array.If no value is found an
                empty array is returned.
          description: >-
            Map of extra retrieved fields. The values of the requested fields
            are always returned in an array.If no value is found an empty array
            is returned.
        id:
          type: string
        iri:
          type: string
          deprecated: true
          description: The IRI of the entity that this node belongs to.
        metadata:
          type: object
          additionalProperties:
            type: object
            description: A nodes extra metadata.
          description: A nodes extra metadata.
        node_id:
          type: string
          description: A nodes id.
        score:
          type: number
          format: double
          description: The similarity score between the node and the query embeddings.
        text:
          type: string
          description: The text of a node from which the embeddings were generated.
      required:
        - iri
        - node_id
        - score
        - text
    VectorSearchQuestionRequest:
      type: object
      description: One or more questions.
      properties:
        language:
          type: string
          description: The desired language of the answer.
        questions:
          type: array
          description: The list of questions.
          items:
            type: string
            description: The list of questions.
      required:
        - questions
    VectorSearchQuestionResponseItem:
      type: object
      description: An array of objects.
      properties:
        answer:
          type: string
        question:
          type: string
    WebPage:
      type: object
      properties:
        abstract:
          type: string
        date_published:
          type: string
          format: date
        headline:
          type: string
        image:
          type: string
        text:
          type: string
        types:
          type: array
          items:
            type: string
        url:
          type: string
    Website:
      type: object
      description: A Website
      properties:
        url:
          type: string
          description: 'The Website URL, it may also start with thew `sc-domain:` prefix.'
      required:
        - url
    WebsiteSearch:
      type: object
      description: Search Data
      properties:
        clicks:
          type: integer
          format: int32
          description: Number of clicks.
        ctr:
          type: number
          format: double
          description: CTR.
        id:
          type: integer
          format: int64
          description: 'The id: it''s now a unique id, but a row index.'
        impressions:
          type: integer
          format: int32
          description: Number of impressions.
        keys:
          type: array
          description: >-
            The keys for the current data, matching the provided `dimensions` in
            the query.
          items:
            type: string
            description: >-
              The keys for the current data, matching the provided `dimensions`
              in the query.
        position:
          type: number
          format: double
          description: Position.
        score:
          type: number
          format: double
          description: >-
            A score to spot traffic opportunities, from 0.0 to 1.0 (the higher
            the better). The score is based on the traffic data.
      required:
        - clicks
        - ctr
        - id
        - impressions
        - keys
        - position
        - score
    WithLimits:
      type: object
      description: An array of objects.
      properties:
        account_limits:
          type: integer
          format: int32
        applies_to:
          type: string
        block:
          type: boolean
        consumption:
          type: integer
          format: int32
          minimum: 1
        id:
          type: integer
          format: int64
        limits:
          type: integer
          format: int32
        reference_id:
          type: integer
          format: int64
        reference_type:
          type: string
          enum:
            - SUBSCRIPTION
            - ACCOUNT
        remaining:
          type: integer
          format: int32
        resets_in_seconds:
          type: integer
          format: int64
        subscription_limits:
          type: integer
          format: int32
      required:
        - applies_to
    Json:
      type: object
    Request1:
      type: object
      properties:
        source:
          type: string
        args:
          $ref: '#/components/schemas/Json'
        url:
          type: string
      description: The Event request
    Event:
      type: object
      properties:
        source:
          type: string
        args:
          $ref: '#/components/schemas/Json'
        url:
          type: string
        recorded_at:
          type: string
          format: date-time
        account_id:
          type: integer
          format: int64
    Response1:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        self:
          type: string
        next:
          type: string
        prev:
          type: string
        last:
          type: string
        first:
          type: string
    ClassificationRequest:
      title: ClassificationRequest
      type: object
      properties:
        classes:
          type: array
          example:
            - indian
            - thai
            - chinese
            - italian
          items:
            type: string
        text:
          type: string
          example: >-
            This dish is a deli egg-bacon-and-cheese-on-a-roll that has been
            pasta-fied, fancified, fetishized and turned into an Italian
            tradition that, like many inviolate Italian traditions, is actually
            far less old than the Mayflower.
    ClassificationResponse:
      title: ClassificationResponse
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        scores:
          type: array
          items:
            type: number
            format: float
    WebAsync:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        completed:
          type: string
          format: date-time
        delivered:
          type: string
          format: date-time
        method:
          type: string
        url:
          type: string
        callback:
          type: string
        remoteAddress:
          type: string
    Entity:
      type: object
      properties:
        reference:
          type: string
          description: The referenced entity URI
        properties:
          $ref: '#/components/schemas/Properties'
      description: The list of entities matching the query.
    LongtailResponse:
      type: object
      properties:
        summary:
          type: string
          description: The page summary.
        entities:
          type: array
          description: The list of entities matching the query.
          items:
            $ref: '#/components/schemas/Entity'
    Properties:
      type: object
      properties:
        name:
          type: string
          description: The name of the entity.
        sameAs:
          type: array
          description: A list of sameAs entity URIs.
          items:
            type: string
            description: A list of sameAs entity URIs.
    RankEntities:
      type: object
      properties:
        rank:
          type: integer
          format: int32
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
    CreateEmbeddingsInput:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          nullable: false
    CompletionRequest:
      type: object
      description: A request for a completion.
      properties:
        frequency_penalty:
          type: number
          format: double
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 2
          minimum: -2
        logit_bias:
          type: object
          additionalProperties:
            type: integer
            format: int32
        max_tokens:
          type: integer
          format: int32
          minimum: 1
        min_words:
          type: integer
          format: int32
          minimum: 0
        model_id:
          type: integer
          format: int64
          minimum: 1
        presence_penalty:
          type: number
          format: double
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 2
          minimum: -2
        prompt:
          type: string
        stop:
          type: string
        temperature:
          type: number
          format: double
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 2
          minimum: 0
      required:
        - prompt
    ContentGeneration:
      type: object
      description: A Content Generation project.
      properties:
        account_id:
          type: integer
          format: int64
          description: The Account id bound to this Content Generation.
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        deleted:
          type: boolean
          default: false
          description: True if the project has been deleted.
        deleted_at:
          type: string
          format: date-time
          description: The delete date-time.
          readOnly: true
        graphql_query:
          type: string
          description: >-
            The GraphQL query which will be used to import entity data from the
            Knowledge Graph.
        id:
          type: integer
          format: int64
          description: The unique id.
          readOnly: true
        max_tokens:
          type: integer
          format: int32
          default: 64
          description: The maximum number of tokens.
          maximum: 2000
          minimum: 0
        min_words:
          type: integer
          format: int32
          description: Minimum amount of words per completion
        model_id:
          type: integer
          format: int64
          default: 1
          description: The model ID.
          minimum: 1
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        name:
          type: string
          description: The name.
          maxLength: 250
          minLength: 0
        penalty:
          type: number
          format: double
          default: 0.5
          description: The penalty score.
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 1.9
          minimum: 0.5
        prompt_template:
          type: string
          description: The prompt template.
        stop:
          type: string
          default: '###'
          description: The stop sequence.
        temperature:
          type: number
          format: double
          default: 0.4
          description: The temperature score.
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 0.8
          minimum: 0.4
        words_to_ignore:
          type: array
          description: Words to ignore when checking for words not in prompt.
          items:
            type: string
            description: Words to ignore when checking for words not in prompt.
          uniqueItems: true
      required:
        - account_id
        - deleted
        - graphql_query
        - name
    ContentGenerationRequest:
      type: object
      description: The Content Generation request.
      properties:
        account_id:
          type: integer
          format: int64
          description: The account id bound to this content generation.
        deleted:
          type: boolean
          default: false
          description: The deleted flag.
        graphql_query:
          type: string
          description: >-
            The GraphQL query which will be used to import entity data from the
            Knowledge Graph.
        max_tokens:
          type: integer
          format: int32
          default: 64
          description: The maximum number of tokens.
          maximum: 2000
          minimum: 0
        min_words:
          type: integer
          format: int32
          default: 0
          description: Minimum amount of words per completion.
        model_id:
          type: integer
          format: int64
          default: 1
          description: The model ID.
          minimum: 1
        name:
          type: string
          description: The model name.
          maxLength: 250
          minLength: 0
        penalty:
          type: number
          format: double
          default: 0.5
          description: The penalty score.
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 1.9
          minimum: 0.5
        prompt_template:
          type: string
          description: The prompt template.
        stop:
          type: string
          default: '###'
          description: The stop sequence.
        temperature:
          type: number
          format: double
          default: 0.4
          description: The temperature score.
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 0.8
          minimum: 0.4
        words_to_ignore:
          type: array
          description: Words to ignore when checking for words not in prompt.
          items:
            type: string
            description: Words to ignore when checking for words not in prompt.
          uniqueItems: true
      required:
        - account_id
        - graphql_query
        - name
    ContentGenerationStats:
      type: object
      description: Statistics about a Content Generation Project.
      properties:
        accepted:
          type: integer
          format: int64
          description: The number of accepted records.
        errors:
          type: integer
          format: int64
          description: The number of records with errors.
        total:
          type: integer
          format: int64
          description: The total number of records.
        valid:
          type: integer
          format: int64
          description: The number of valid records.
        warnings:
          type: integer
          format: int64
          description: The number of records with warnings.
    Field:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Json1:
      type: object
      description: The data from knowledge graph after applying the graphql query.
      readOnly: true
    LevelEnum:
      type: string
      description: The rule level.
      enum:
        - RECOMMENDED
        - REQUIRED
    Model:
      type: object
      description: A language model.
      properties:
        id:
          type: integer
          format: int64
          description: The unique id.
          readOnly: true
        name:
          type: string
          description: The language model name.
        system_prompt:
          type: string
          description: The system prompt for the model - chat models only.
        token_margin:
          type: integer
          format: int32
          description: The upper token margin for completions.
          maximum: 30
      required:
        - name
    PageContentGeneration:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/ContentGeneration'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageField:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Field'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageModel:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Model'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PagePreset:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Preset'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageRecord:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Record'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageRule:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Rule'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    PageWord:
      type: object
      description: A page object with links to move to other pages and the list of objects.
      properties:
        first:
          type: string
          description: The link to the first page.
          nullable: true
        items:
          type: array
          description: An array of objects.
          items:
            $ref: '#/components/schemas/Word'
        last:
          type: string
          description: The link to the last page.
          nullable: true
        next:
          type: string
          description: The link to the next page or `null` if there's no page.
          nullable: true
        prev:
          type: string
          description: The link to the previous page or `null` if there's no page.
          nullable: true
        self:
          type: string
          description: The link to the current page.
          nullable: true
      required:
        - first
        - items
        - last
        - next
        - prev
        - self
    Preset:
      type: object
      description: An array of objects.
      properties:
        body:
          type: string
          description: The predefined graphql query.
        id:
          type: integer
          format: int64
        label:
          type: string
          description: The label of the preset.
      required:
        - body
        - label
    ProjectType:
      type: string
      description: 'The project type, if applicable.'
      enum:
        - SMART_CONTENT
        - CONTENT_GENERATION
    QuestionAndAnswer:
      type: object
      description: Generated Q&A content.
      properties:
        answer:
          type: string
          description: The generated answer.
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        entity_gaps:
          type: array
          items:
            type: string
          uniqueItems: true
        errors:
          type: array
          description: The set of errors found for the answer.
          items:
            $ref: '#/components/schemas/ValidationResult'
          readOnly: true
        id:
          type: integer
          format: int64
          description: The unique id.
          readOnly: true
        iri:
          type: string
          description: The webpage IRI tied to this Q&A.
        is_deleted:
          type: boolean
          default: false
          description: The deleted flag.
        is_published:
          type: boolean
          default: false
          description: The published flag.
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        question:
          type: string
          description: The generated question.
        smart_content_id:
          type: integer
          format: int64
        url:
          type: string
          description: The webpage URL tied to this Q&A.
        warnings:
          type: array
          description: The set of warnings found for the answer.
          items:
            $ref: '#/components/schemas/ValidationResult'
          readOnly: true
      required:
        - iri
        - url
    QuestionAndAnswerRequest:
      type: object
      properties:
        smartContentId:
          type: integer
          format: int64
        webpageProperties:
          $ref: '#/components/schemas/WebpageProperties'
    Record:
      type: object
      properties:
        completion:
          type: string
        content_generation_id:
          type: integer
          format: int64
          description: The parent content generation id.
          readOnly: true
        data:
          $ref: '#/components/schemas/Json1'
        errors:
          type: array
          description: The set of errors found for record.
          items:
            $ref: '#/components/schemas/ValidationResult'
          readOnly: true
        has_upvote:
          type: boolean
          description: This indicates whether the user upvoted the completion.
        id:
          type: integer
          format: int64
        is_accepted:
          type: boolean
          description: This indicates whether the completion is accepted by the user.
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        not_in_prompt_words:
          type: array
          description: Words in completion that are not in the prompt.
          items:
            type: string
            description: Words in completion that are not in the prompt.
            readOnly: true
          readOnly: true
          uniqueItems: true
        prompt:
          type: string
          description: The prompt.
        repeated_words:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WordRepetitionData'
          description: Words in completion which are repeated.
          readOnly: true
        status:
          type: string
          description: >-
            The status of the record, whether it's accepted, with errors, with
            warnings or valid.
          enum:
            - accepted
            - warnings
            - errors
            - valid
          readOnly: true
        validated_at:
          type: string
          format: date-time
          description: The last validation date-time.
          readOnly: true
        warnings:
          type: array
          description: The set of errors found for record.
          items:
            $ref: '#/components/schemas/ValidationResult'
          readOnly: true
      required:
        - content_generation_id
        - has_upvote
        - is_accepted
        - prompt
    RenderRequest:
      type: object
      description: A request to render a template using the provided data structure.
      properties:
        data:
          $ref: '#/components/schemas/Json1'
        template:
          type: string
          description: The liquid template.
      required:
        - data
        - template
    Request2:
      type: object
      properties:
        completion:
          type: string
        has_upvote:
          type: boolean
          description: This indicates whether the user upvoted the completion.
        is_accepted:
          type: boolean
          description: This indicates whether the completion is accepted by the user.
        validated_at:
          type: string
          format: date-time
          description: Validation time of the record - null to revalidate.
      required:
        - has_upvote
        - is_accepted
    Rule:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        description:
          type: string
          description: Description for the rule
        fixes:
          type: array
          description: The list of fixes to apply when the rule validation fails.
          items:
            $ref: '#/components/schemas/ValidationFix'
        id:
          type: integer
          format: int64
        is_enabled:
          type: boolean
        level:
          $ref: '#/components/schemas/LevelEnum'
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        name:
          type: string
          description: The rule name.
        project_id:
          type: integer
          format: int64
        project_type:
          $ref: '#/components/schemas/ProjectType'
        scope:
          $ref: '#/components/schemas/Scope'
        type:
          type: string
          description: 'The rule type, one of `field`, `word` or `code`. By default `field`.'
        what_operand_lhs:
          $ref: '#/components/schemas/WhatOperandLhs'
        what_operand_rhs:
          type: string
          description: The right hand side operand for what condition.
        what_operator:
          $ref: '#/components/schemas/WhatOperator'
        when_operand_lhs:
          type: string
          description: The left hand side  operand for when condition.
        when_operand_rhs:
          type: string
          description: The right hand side operand for when condition.
        when_operator:
          $ref: '#/components/schemas/WhenOperator'
      required:
        - level
        - name
        - scope
        - type
        - what_operand_lhs
        - what_operand_rhs
        - what_operator
        - when_operand_lhs
        - when_operand_rhs
        - when_operator
    RuleRequest:
      type: object
      properties:
        description:
          type: string
          description: Description for the rule
        fixes:
          type: array
          description: The list of fixes to apply when the rule validation fails.
          items:
            $ref: '#/components/schemas/ValidationFix'
        is_enabled:
          type: boolean
        level:
          $ref: '#/components/schemas/LevelEnum'
        name:
          type: string
          description: The rule name.
        project_id:
          type: integer
          format: int64
          description: 'The project id, if applicable.'
        project_type:
          $ref: '#/components/schemas/ProjectType'
        scope:
          $ref: '#/components/schemas/Scope'
        type:
          type: string
          description: 'The rule type, one of `field`, `word` or `code`. By default `field`.'
        what_operand_lhs:
          $ref: '#/components/schemas/WhatOperandLhs'
        what_operand_rhs:
          type: string
          description: The right hand side operand for what condition.
        what_operator:
          $ref: '#/components/schemas/WhatOperator'
        when_operand_lhs:
          type: string
          description: The left hand side  operand for when condition.
        when_operand_rhs:
          type: string
          description: The right hand side operand for when condition.
        when_operator:
          $ref: '#/components/schemas/WhenOperator'
      required:
        - level
        - name
        - scope
        - type
        - what_operand_lhs
        - what_operand_rhs
        - what_operator
        - when_operand_lhs
        - when_operand_rhs
        - when_operator
    Scope:
      type: string
      description: The rule scope.
      enum:
        - USER
        - PROJECT
    SmartContent:
      type: object
      description: A Smart Content project.
      properties:
        account_id:
          type: integer
          format: int64
          description: The account id.
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        id:
          type: integer
          format: int64
          description: The unique id.
          readOnly: true
        model_id:
          type: integer
          format: int64
          default: 1
          description: The model id.
          minimum: 1
      required:
        - account_id
    SmartContentRequest:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          description: The account id.
          minimum: 1
        model_id:
          type: integer
          format: int64
          default: 1
          description: The model id.
          minimum: 1
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RuleRequest'
        webpage_properties:
          type: array
          items:
            $ref: '#/components/schemas/WebpageProperties'
      required:
        - account_id
    UpdateQuestionAndAnswerRequest:
      type: object
      properties:
        answer:
          type: string
        question:
          type: string
    UpdateRecordRequest:
      type: object
      description: A request to update the properties of a record.
      properties:
        completion:
          type: string
        has_upvote:
          type: boolean
          description: Whether the user upvoted the completion.
        id:
          type: integer
          format: int64
        is_accepted:
          type: boolean
          description: Whether the completion is accepted by the user.
      required:
        - has_upvote
        - id
        - is_accepted
    UpdateRecordsRequest:
      type: object
      description: A request to update the properties of multiple records.
      properties:
        validated_at:
          type: string
          format: date-time
          description: The validation time of the record.
    ValidationFix:
      type: object
      description: The list of fixes to apply when the rule validation fails.
      properties:
        type:
          $ref: '#/components/schemas/ValidationTypeEnum'
        what:
          type: string
        with:
          type: string
    ValidationResult:
      type: object
      description: The set of warnings found for the answer.
      properties:
        levelEnum:
          $ref: '#/components/schemas/LevelEnum'
        name:
          type: string
        result:
          type: string
          enum:
            - PASS
            - FAIL
            - SKIP
            - FIXED
      readOnly: true
    ValidationTypeEnum:
      type: string
      enum:
        - FIND_AND_REPLACE
        - OPEN_AI
        - APPEND
    WebpageProperties:
      type: object
      properties:
        entities:
          type: array
          items:
            type: string
          uniqueItems: true
        iri:
          type: string
        query:
          type: string
        url:
          type: string
      required:
        - entities
        - iri
        - url
    WhatOperandLhs:
      type: string
      description: The left hand side operand for what condition.
      enum:
        - EVERYWHERE
        - FIRST_SENTENCE
        - LAST_SENTENCE
    WhatOperator:
      type: string
      description: The operator for what condition.
      enum:
        - CONTAINS
        - DOESNT_CONTAIN
        - ENDS_WITH
        - REGEX
        - REGEX_DOESNT_MATCH
    WhenOperator:
      type: string
      description: The operator for when condition.
      enum:
        - ALWAYS
        - EQUALS
        - NOT_EQUALS
    Word:
      type: object
      description: A Word bias.
      properties:
        bias:
          type: integer
          format: int32
          description: The bias.
        cluster:
          type: string
          description: The cluster of the word.
          maxLength: 1000
        content_generation_id:
          type: integer
          format: int64
          description: The content generation id.
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The create date-time.
          readOnly: true
        id:
          type: integer
          format: int64
          description: The unique id.
          readOnly: true
        modified_at:
          type: string
          format: date-time
          description: The last modified date-time.
          readOnly: true
        token_id:
          type: string
          description: The token id for the word.
          maxLength: 1000
        word:
          type: string
          description: The actual word.
          maxLength: 1000
      required:
        - bias
        - cluster
        - content_generation_id
        - token_id
        - word
    WordRepetitionData:
      type: object
      description: Words in completion which are repeated.
      properties:
        count:
          type: integer
          format: int32
        repeated_in_same_sentence:
          type: boolean
      readOnly: true
    WordRequest:
      type: object
      properties:
        bias:
          type: integer
          format: int32
          description: The bias.
        word:
          type: string
          description: The actual word.
          maxLength: 1000
      required:
        - bias
        - word
    InspectResponse:
      type: object
      properties:
        empty:
          type: boolean
      additionalProperties:
        type: object
    Html:
      type: object
      properties:
        fragment:
          type: string
          description: The html fragment to analyze.
        page:
          type: string
          description: 'The html page to analyze, either fragment or page should be present'
      description: The html fragment or html page to analyze.
    Request3:
      required:
        - language
        - scope
      type: object
      properties:
        html:
          $ref: '#/components/schemas/Html'
        url:
          type: string
          description: The url of the page to analyze.
          format: url
        urlClient:
          type: string
          description: >-
            The client which the analysis should use to extract the content, by
            default chrome is used.
          enum:
            - CHROME
            - PLAIN_HTTP
            - 'CHROME, PLAIN_HTTP'
        language:
          maxLength: 2
          minLength: 2
          type: string
          description: 'The content language, 2 letters code, e.g. ''en''.'
        text:
          type: string
          description: A textual fragment.
        exclude:
          type: array
          description: An array of item IDs to exclude from the analysis results.
          items:
            type: string
            description: An array of item IDs to exclude from the analysis results.
            format: url
        scope:
          type: string
          description: >-
            The scope of the analysis, one of 'local', 'network', 'cloud-only',
            'network-only' or 'all'.
        matches:
          type: integer
          description: >-
            Filter out results that don't have at least the specified number of
            occurrences. By default 1.
          format: int32
        links:
          type: string
          description: >-
            When returning an interpolated HTML results, matches should have the
            'wl-link' class. By default 'no'.
      description: The request
    Annotation:
      type: object
      properties:
        annotationId:
          type: string
          description: An unique id.
        start:
          type: integer
          description: >-
            The starting posistion of annotation in content (zero-indexed & non
            negative ).
          format: int32
        end:
          type: integer
          description: >-
            The ending posistion of annotation in content (zero-indexed & non
            negative ).
          format: int32
        text:
          type: string
          description: The annotated text.
        entityMatches:
          type: array
          description: The list of entities which the annotation matches.
          items:
            $ref: '#/components/schemas/EntityMatch'
      description: Object representing single annotation.
    Entity1:
      type: object
      properties:
        entityId:
          type: string
          description: The entity URI.
          format: url
        confidence:
          type: number
          description: Confidence score representing the entity match level.
          format: double
        mainType:
          type: string
          description: The main schema type for the current entity.
        types:
          type: array
          description: The list of schema types which the entity can be classified to.
          items:
            type: string
            description: The list of schema types which the entity can be classified to.
        label:
          type: string
          description: The title of the entity.
        description:
          type: string
          description: The description about the entity.
        images:
          type: array
          description: The list of entity image URIs.
          items:
            type: string
            description: The list of entity image URIs.
            format: url
        sameAs:
          type: array
          description: The list of entity sameas URIs.
          items:
            type: string
            description: The list of entity sameas URIs.
            format: url
        properties:
          $ref: '#/components/schemas/Properties1'
        synonyms:
          type: array
          items:
            type: string
      description: Entity
    EntityMatch:
      type: object
      properties:
        confidence:
          type: number
          description: Confidence score for the current entity.
          format: double
        entityId:
          type: string
          description: The entity URI.
          format: url
      description: Entity Match
    Image:
      type: object
      properties:
        label:
          type: string
          description: The title of the image.
        url:
          type: string
          description: The image URI.
          format: url
      description: Image
    Properties1:
      type: object
      properties:
        latitude:
          type: number
          description: The latitude.
          format: double
        longitude:
          type: number
          description: The longitude.
          format: double
      description: The entity properties.
    Response2:
      type: object
      properties:
        entities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Entity1'
          description: A map of entity URI to the respective entity.
        annotations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Annotation'
          description: A map of annotation id to the respective annotation.
        images:
          type: array
          description: A list of images.
          items:
            $ref: '#/components/schemas/Image'
        languages:
          type: array
          description: A list of languages.
          items:
            type: string
            description: A list of languages.
        topics:
          type: array
          description: A list of topics.
          items:
            $ref: '#/components/schemas/Topic'
        content:
          type: string
          description: The text supplied for analysis.
      description: Response
    Topic:
      type: object
      properties:
        label:
          type: string
          description: The topic title.
        description:
          type: string
          description: The topic description.
        uri:
          type: string
          description: The topic URI.
          format: url
        confidence:
          type: number
          description: The topic confidence score.
          format: double
        images:
          type: array
          description: A list of image URIs.
          items:
            type: string
            description: A list of image URIs.
            format: url
        sameAs:
          type: array
          description: A list of sameas URIs.
          items:
            type: string
            description: A list of sameas URIs.
            format: url
      description: Topic
    EntityGapRequest:
      required:
        - query
        - url
      type: object
      properties:
        url:
          type: string
          description: The URL to analyze.
        query:
          type: string
          description: The search query to analyze.
        model:
          type: string
          description: The model
        number_of_entities:
          type: integer
          description: Number of entities to highlight.
          format: int32
          default: 5
        query_location_name:
          type: string
          description: 'The location name for the query, e.g. United Kingdom.'
          example: United Kingdom
          default: United States
        query_search_engine:
          type: string
          description: >-
            The search engine domain for the query, if not set will be chosen
            according to `query_location_name`
          example: google.co.uk
          default: google.com
    AnalysesResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysesResponseItem'
    AnalysesResponseItem:
      type: object
      properties:
        text:
          type: string
          description: The text matching the entity.
        confidence:
          maximum: 1
          minimum: 0
          type: number
          description: The confidence score this is the right entity.
          format: double
        occurrences:
          type: integer
          description: The number of occurrences.
          format: int32
        serp_position:
          type: integer
          description: The position of the entity in SERP. `null` if not applicable.
          format: int32
        entity_id:
          type: string
          description: The entity id (URI).
        entity_label:
          type: string
          description: The entity label.
        entity_type:
          type: string
          description: The entity type.
        entity_description:
          type: string
          description: The entity description.
    ContentExpansionRequest:
      required:
        - entities
        - openai_key
        - url
      type: object
      properties:
        url:
          type: string
          description: The target URL.
          format: url
        entities:
          uniqueItems: true
          type: array
          description: A list of entity labels.
          items:
            type: string
            description: A list of entity labels.
        openai_key:
          type: string
          description: The OpenAI key.
      description: The Content Expansion request.
    ContentExpansionResponse:
      type: object
      properties:
        completion:
          type: string
          description: The completion.
      description: A Content Expansion response.
    AnalysesRequest:
      type: object
      properties:
        text:
          type: string
          description: The text to analyse.
        url:
          type: string
          description: The URL to analyse.
        query:
          type: string
          description: The query string to analyse.
        html:
          type: string
          description: The html to analyse.
        language_code:
          type: string
          description: 'The language code used for content analysis, e.g. `en`.'
          example: en
          default: en
        query_location_name:
          type: string
          description: 'The location name for the query, e.g. United Kingdom.'
          example: United Kingdom
          default: United States
        query_search_engine:
          type: string
          description: >-
            The search engine domain for the query, if not set will be chosen
            according to `query_location_name`
          example: google.co.uk
        linked_data:
          type: boolean
          description: >-
            Whether to include results from Linked Data (e.g. DBpedia), by
            default true.
          default: true
        local_data:
          type: boolean
          description: >-
            Whether to include results from the local Knowledge Graph, by
            default true.
          default: true
        network_data:
          type: boolean
          description: >-
            Whether to include results from connected Knowledge Graphs, by
            default true.
          default: true
      description: The analysis request.
  securitySchemes:
    ApiKey:
      type: apiKey
      description: '`Key {your key}`'
      name: Authorization
      in: header
  parameters:
    page:
      name: page
      in: query
      schema:
        format: int64
        default: 1
        minimum: 0
      description: Page number.
    limit:
      name: limit
      in: query
      schema:
        format: int32
        default: 100
        maximum: 1000
        minimum: 0
      description: Number of results per page.
    continuation_id:
      name: continuation_id
      in: query
      schema:
        format: int64
      description: >-
        Optional, ID of the last item that was retrieved. If provided, enables
        faster pagination.
    order:
      name: order
      in: query
      schema:
        type: string
      description: Optional sort order (asc / desc) - default asc.
